/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using comp5210.node;

namespace comp5210.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProgram(AProgram node);
    void CaseAManyConstants(AManyConstants node);
    void CaseANothingConstants(ANothingConstants node);
    void CaseAIntdeclConstDeclare(AIntdeclConstDeclare node);
    void CaseAFloatdeclConstDeclare(AFloatdeclConstDeclare node);
    void CaseAManyMethodsMethods(AManyMethodsMethods node);
    void CaseALastMethodMethods(ALastMethodMethods node);
    void CaseAMethod(AMethod node);
    void CaseAMethodCall(AMethodCall node);
    void CaseAStringParamActualParameters(AStringParamActualParameters node);
    void CaseAIntParametersActualParameters(AIntParametersActualParameters node);
    void CaseAFloatParametersActualParameters(AFloatParametersActualParameters node);
    void CaseAVarParametersActualParameters(AVarParametersActualParameters node);
    void CaseAStringActualParameters(AStringActualParameters node);
    void CaseAVariableActualParameters(AVariableActualParameters node);
    void CaseAIntActualParameters(AIntActualParameters node);
    void CaseAFloatActualParameters(AFloatActualParameters node);
    void CaseANothingActualParameters(ANothingActualParameters node);
    void CaseAManyParametersFormalParameters(AManyParametersFormalParameters node);
    void CaseAFinalParameterFormalParameters(AFinalParameterFormalParameters node);
    void CaseAManyStatementsStatements(AManyStatementsStatements node);
    void CaseAOneStatementStatements(AOneStatementStatements node);
    void CaseAAssignmentStatement(AAssignmentStatement node);
    void CaseANumDeclareStatement(ANumDeclareStatement node);
    void CaseAMethodCallStatement(AMethodCallStatement node);
    void CaseAIfStatement(AIfStatement node);
    void CaseAWhileStatement(AWhileStatement node);
    void CaseAAssignIntAssignment(AAssignIntAssignment node);
    void CaseAVarDeclareAssignment(AVarDeclareAssignment node);
    void CaseAArrayAssignMathIndexAssignment(AArrayAssignMathIndexAssignment node);
    void CaseAArrayAssignAssignment(AArrayAssignAssignment node);
    void CaseAIntdeclNumDeclare(AIntdeclNumDeclare node);
    void CaseAFloatdeclNumDeclare(AFloatdeclNumDeclare node);
    void CaseAArrayIndexNumDeclare(AArrayIndexNumDeclare node);
    void CaseAIf(AIf node);
    void CaseAElseElsepart(AElseElsepart node);
    void CaseANoElseElsepart(ANoElseElsepart node);
    void CaseAWhile(AWhile node);
    void CaseAAndExpressions(AAndExpressions node);
    void CaseAOrExpressions(AOrExpressions node);
    void CaseANotExpressions(ANotExpressions node);
    void CaseANoLogOpExpressions(ANoLogOpExpressions node);
    void CaseAGreaterLogicalCompare(AGreaterLogicalCompare node);
    void CaseALessThanLogicalCompare(ALessThanLogicalCompare node);
    void CaseAGreaterThanEqualToLogicalCompare(AGreaterThanEqualToLogicalCompare node);
    void CaseALessThanEqualToLogicalCompare(ALessThanEqualToLogicalCompare node);
    void CaseAEqualToLogicalCompare(AEqualToLogicalCompare node);
    void CaseANoLogCompareLogicalCompare(ANoLogCompareLogicalCompare node);
    void CaseAAddAddSub(AAddAddSub node);
    void CaseASubtractAddSub(ASubtractAddSub node);
    void CaseANoMoreAddSubAddSub(ANoMoreAddSubAddSub node);
    void CaseAMultiplyMultiDiv(AMultiplyMultiDiv node);
    void CaseADivideMultiDiv(ADivideMultiDiv node);
    void CaseANoMoreDivMultiMultiDiv(ANoMoreDivMultiMultiDiv node);
    void CaseAParenthParenth(AParenthParenth node);
    void CaseAIntParenth(AIntParenth node);
    void CaseAFloatParenth(AFloatParenth node);
    void CaseAArrayParenth(AArrayParenth node);
    void CaseAVariableParenth(AVariableParenth node);

    void CaseTPublic(TPublic node);
    void CaseTPrivate(TPrivate node);
    void CaseTComma(TComma node);
    void CaseTFunction(TFunction node);
    void CaseTSemicolon(TSemicolon node);
    void CaseTConstantLit(TConstantLit node);
    void CaseTWhitespace(TWhitespace node);
    void CaseTComment(TComment node);
    void CaseTAnd(TAnd node);
    void CaseTLessthan(TLessthan node);
    void CaseTPlus(TPlus node);
    void CaseTSub(TSub node);
    void CaseTMulti(TMulti node);
    void CaseTDiv(TDiv node);
    void CaseTOr(TOr node);
    void CaseTNot(TNot node);
    void CaseTEqto(TEqto node);
    void CaseTGrtreqto(TGrtreqto node);
    void CaseTLesseqto(TLesseqto node);
    void CaseTGrtr(TGrtr node);
    void CaseTIflit(TIflit node);
    void CaseTElse(TElse node);
    void CaseTWhilelit(TWhilelit node);
    void CaseTEqual(TEqual node);
    void CaseTString(TString node);
    void CaseTFloatlit(TFloatlit node);
    void CaseTIntlit(TIntlit node);
    void CaseTOpenbracket(TOpenbracket node);
    void CaseTClosedbracket(TClosedbracket node);
    void CaseTOpenparenth(TOpenparenth node);
    void CaseTClosedparenth(TClosedparenth node);
    void CaseTOpencurl(TOpencurl node);
    void CaseTClosecurl(TClosecurl node);
    void CaseTQuote(TQuote node);
    void CaseTId(TId node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProgram(AProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAManyConstants(AManyConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANothingConstants(ANothingConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntdeclConstDeclare(AIntdeclConstDeclare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatdeclConstDeclare(AFloatdeclConstDeclare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAManyMethodsMethods(AManyMethodsMethods node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALastMethodMethods(ALastMethodMethods node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMethod(AMethod node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMethodCall(AMethodCall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringParamActualParameters(AStringParamActualParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntParametersActualParameters(AIntParametersActualParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatParametersActualParameters(AFloatParametersActualParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVarParametersActualParameters(AVarParametersActualParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringActualParameters(AStringActualParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableActualParameters(AVariableActualParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntActualParameters(AIntActualParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatActualParameters(AFloatActualParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANothingActualParameters(ANothingActualParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAManyParametersFormalParameters(AManyParametersFormalParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFinalParameterFormalParameters(AFinalParameterFormalParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAManyStatementsStatements(AManyStatementsStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneStatementStatements(AOneStatementStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANumDeclareStatement(ANumDeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMethodCallStatement(AMethodCallStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfStatement(AIfStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileStatement(AWhileStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignIntAssignment(AAssignIntAssignment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVarDeclareAssignment(AVarDeclareAssignment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayAssignMathIndexAssignment(AArrayAssignMathIndexAssignment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayAssignAssignment(AArrayAssignAssignment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntdeclNumDeclare(AIntdeclNumDeclare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatdeclNumDeclare(AFloatdeclNumDeclare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayIndexNumDeclare(AArrayIndexNumDeclare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIf(AIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAElseElsepart(AElseElsepart node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoElseElsepart(ANoElseElsepart node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhile(AWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndExpressions(AAndExpressions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOrExpressions(AOrExpressions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotExpressions(ANotExpressions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoLogOpExpressions(ANoLogOpExpressions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterLogicalCompare(AGreaterLogicalCompare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessThanLogicalCompare(ALessThanLogicalCompare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterThanEqualToLogicalCompare(AGreaterThanEqualToLogicalCompare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessThanEqualToLogicalCompare(ALessThanEqualToLogicalCompare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEqualToLogicalCompare(AEqualToLogicalCompare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoLogCompareLogicalCompare(ANoLogCompareLogicalCompare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAddAddSub(AAddAddSub node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASubtractAddSub(ASubtractAddSub node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoMoreAddSubAddSub(ANoMoreAddSubAddSub node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultiplyMultiDiv(AMultiplyMultiDiv node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivideMultiDiv(ADivideMultiDiv node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoMoreDivMultiMultiDiv(ANoMoreDivMultiMultiDiv node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParenthParenth(AParenthParenth node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntParenth(AIntParenth node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatParenth(AFloatParenth node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayParenth(AArrayParenth node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableParenth(AVariableParenth node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTPublic(TPublic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPrivate(TPrivate node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFunction(TFunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSemicolon(TSemicolon node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTConstantLit(TConstantLit node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhitespace(TWhitespace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAnd(TAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessthan(TLessthan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSub(TSub node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMulti(TMulti node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDiv(TDiv node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOr(TOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNot(TNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEqto(TEqto node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGrtreqto(TGrtreqto node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLesseqto(TLesseqto node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGrtr(TGrtr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIflit(TIflit node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElse(TElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhilelit(TWhilelit node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEqual(TEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloatlit(TFloatlit node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIntlit(TIntlit node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenbracket(TOpenbracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTClosedbracket(TClosedbracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenparenth(TOpenparenth node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTClosedparenth(TClosedparenth node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpencurl(TOpencurl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTClosecurl(TClosecurl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTQuote(TQuote node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetMethods() != null)
        {
            node.GetMethods().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAManyConstants(AManyConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAManyConstants(AManyConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAManyConstants(AManyConstants node)
    {
        InAManyConstants(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetConstDeclare() != null)
        {
            node.GetConstDeclare().Apply(this);
        }
        OutAManyConstants(node);
    }
    public virtual void InANothingConstants(ANothingConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutANothingConstants(ANothingConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseANothingConstants(ANothingConstants node)
    {
        InANothingConstants(node);
        OutANothingConstants(node);
    }
    public virtual void InAIntdeclConstDeclare(AIntdeclConstDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntdeclConstDeclare(AIntdeclConstDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntdeclConstDeclare(AIntdeclConstDeclare node)
    {
        InAIntdeclConstDeclare(node);
        if(node.GetConstantLit() != null)
        {
            node.GetConstantLit().Apply(this);
        }
        if(node.GetVarType() != null)
        {
            node.GetVarType().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetIntlit() != null)
        {
            node.GetIntlit().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAIntdeclConstDeclare(node);
    }
    public virtual void InAFloatdeclConstDeclare(AFloatdeclConstDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatdeclConstDeclare(AFloatdeclConstDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatdeclConstDeclare(AFloatdeclConstDeclare node)
    {
        InAFloatdeclConstDeclare(node);
        if(node.GetConstantLit() != null)
        {
            node.GetConstantLit().Apply(this);
        }
        if(node.GetVarType() != null)
        {
            node.GetVarType().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetFloatlit() != null)
        {
            node.GetFloatlit().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAFloatdeclConstDeclare(node);
    }
    public virtual void InAManyMethodsMethods(AManyMethodsMethods node)
    {
        DefaultIn(node);
    }

    public virtual void OutAManyMethodsMethods(AManyMethodsMethods node)
    {
        DefaultOut(node);
    }

    public override void CaseAManyMethodsMethods(AManyMethodsMethods node)
    {
        InAManyMethodsMethods(node);
        if(node.GetMethods() != null)
        {
            node.GetMethods().Apply(this);
        }
        if(node.GetMethod() != null)
        {
            node.GetMethod().Apply(this);
        }
        OutAManyMethodsMethods(node);
    }
    public virtual void InALastMethodMethods(ALastMethodMethods node)
    {
        DefaultIn(node);
    }

    public virtual void OutALastMethodMethods(ALastMethodMethods node)
    {
        DefaultOut(node);
    }

    public override void CaseALastMethodMethods(ALastMethodMethods node)
    {
        InALastMethodMethods(node);
        if(node.GetMethod() != null)
        {
            node.GetMethod().Apply(this);
        }
        OutALastMethodMethods(node);
    }
    public virtual void InAMethod(AMethod node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethod(AMethod node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethod(AMethod node)
    {
        InAMethod(node);
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        if(node.GetMethodName() != null)
        {
            node.GetMethodName().Apply(this);
        }
        if(node.GetOpenparenth() != null)
        {
            node.GetOpenparenth().Apply(this);
        }
        if(node.GetFormalParameters() != null)
        {
            node.GetFormalParameters().Apply(this);
        }
        if(node.GetClosedparenth() != null)
        {
            node.GetClosedparenth().Apply(this);
        }
        if(node.GetOpencurl() != null)
        {
            node.GetOpencurl().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetClosecurl() != null)
        {
            node.GetClosecurl().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAMethod(node);
    }
    public virtual void InAMethodCall(AMethodCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodCall(AMethodCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodCall(AMethodCall node)
    {
        InAMethodCall(node);
        if(node.GetMethodName() != null)
        {
            node.GetMethodName().Apply(this);
        }
        if(node.GetOpenparenth() != null)
        {
            node.GetOpenparenth().Apply(this);
        }
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        if(node.GetClosedparenth() != null)
        {
            node.GetClosedparenth().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAMethodCall(node);
    }
    public virtual void InAStringParamActualParameters(AStringParamActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringParamActualParameters(AStringParamActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringParamActualParameters(AStringParamActualParameters node)
    {
        InAStringParamActualParameters(node);
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringParamActualParameters(node);
    }
    public virtual void InAIntParametersActualParameters(AIntParametersActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntParametersActualParameters(AIntParametersActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntParametersActualParameters(AIntParametersActualParameters node)
    {
        InAIntParametersActualParameters(node);
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetIntlit() != null)
        {
            node.GetIntlit().Apply(this);
        }
        OutAIntParametersActualParameters(node);
    }
    public virtual void InAFloatParametersActualParameters(AFloatParametersActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatParametersActualParameters(AFloatParametersActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatParametersActualParameters(AFloatParametersActualParameters node)
    {
        InAFloatParametersActualParameters(node);
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetFloatlit() != null)
        {
            node.GetFloatlit().Apply(this);
        }
        OutAFloatParametersActualParameters(node);
    }
    public virtual void InAVarParametersActualParameters(AVarParametersActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarParametersActualParameters(AVarParametersActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarParametersActualParameters(AVarParametersActualParameters node)
    {
        InAVarParametersActualParameters(node);
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVarParametersActualParameters(node);
    }
    public virtual void InAStringActualParameters(AStringActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringActualParameters(AStringActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringActualParameters(AStringActualParameters node)
    {
        InAStringActualParameters(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringActualParameters(node);
    }
    public virtual void InAVariableActualParameters(AVariableActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableActualParameters(AVariableActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableActualParameters(AVariableActualParameters node)
    {
        InAVariableActualParameters(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableActualParameters(node);
    }
    public virtual void InAIntActualParameters(AIntActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntActualParameters(AIntActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntActualParameters(AIntActualParameters node)
    {
        InAIntActualParameters(node);
        if(node.GetIntlit() != null)
        {
            node.GetIntlit().Apply(this);
        }
        OutAIntActualParameters(node);
    }
    public virtual void InAFloatActualParameters(AFloatActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatActualParameters(AFloatActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatActualParameters(AFloatActualParameters node)
    {
        InAFloatActualParameters(node);
        if(node.GetFloatlit() != null)
        {
            node.GetFloatlit().Apply(this);
        }
        OutAFloatActualParameters(node);
    }
    public virtual void InANothingActualParameters(ANothingActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANothingActualParameters(ANothingActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANothingActualParameters(ANothingActualParameters node)
    {
        InANothingActualParameters(node);
        OutANothingActualParameters(node);
    }
    public virtual void InAManyParametersFormalParameters(AManyParametersFormalParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAManyParametersFormalParameters(AManyParametersFormalParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAManyParametersFormalParameters(AManyParametersFormalParameters node)
    {
        InAManyParametersFormalParameters(node);
        if(node.GetVarType() != null)
        {
            node.GetVarType().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetFormalParameters() != null)
        {
            node.GetFormalParameters().Apply(this);
        }
        OutAManyParametersFormalParameters(node);
    }
    public virtual void InAFinalParameterFormalParameters(AFinalParameterFormalParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFinalParameterFormalParameters(AFinalParameterFormalParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAFinalParameterFormalParameters(AFinalParameterFormalParameters node)
    {
        InAFinalParameterFormalParameters(node);
        if(node.GetVarType() != null)
        {
            node.GetVarType().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        OutAFinalParameterFormalParameters(node);
    }
    public virtual void InAManyStatementsStatements(AManyStatementsStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAManyStatementsStatements(AManyStatementsStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAManyStatementsStatements(AManyStatementsStatements node)
    {
        InAManyStatementsStatements(node);
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAManyStatementsStatements(node);
    }
    public virtual void InAOneStatementStatements(AOneStatementStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneStatementStatements(AOneStatementStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneStatementStatements(AOneStatementStatements node)
    {
        InAOneStatementStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAOneStatementStatements(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InANumDeclareStatement(ANumDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumDeclareStatement(ANumDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseANumDeclareStatement(ANumDeclareStatement node)
    {
        InANumDeclareStatement(node);
        if(node.GetNumDeclare() != null)
        {
            node.GetNumDeclare().Apply(this);
        }
        OutANumDeclareStatement(node);
    }
    public virtual void InAMethodCallStatement(AMethodCallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodCallStatement(AMethodCallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodCallStatement(AMethodCallStatement node)
    {
        InAMethodCallStatement(node);
        if(node.GetMethodCall() != null)
        {
            node.GetMethodCall().Apply(this);
        }
        OutAMethodCallStatement(node);
    }
    public virtual void InAIfStatement(AIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatement(AIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatement(AIfStatement node)
    {
        InAIfStatement(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutAIfStatement(node);
    }
    public virtual void InAWhileStatement(AWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatement(AWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatement(AWhileStatement node)
    {
        InAWhileStatement(node);
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        OutAWhileStatement(node);
    }
    public virtual void InAAssignIntAssignment(AAssignIntAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignIntAssignment(AAssignIntAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignIntAssignment(AAssignIntAssignment node)
    {
        InAAssignIntAssignment(node);
        if(node.GetIntName() != null)
        {
            node.GetIntName().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetExpressions() != null)
        {
            node.GetExpressions().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAAssignIntAssignment(node);
    }
    public virtual void InAVarDeclareAssignment(AVarDeclareAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarDeclareAssignment(AVarDeclareAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarDeclareAssignment(AVarDeclareAssignment node)
    {
        InAVarDeclareAssignment(node);
        if(node.GetVarType() != null)
        {
            node.GetVarType().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAVarDeclareAssignment(node);
    }
    public virtual void InAArrayAssignMathIndexAssignment(AArrayAssignMathIndexAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayAssignMathIndexAssignment(AArrayAssignMathIndexAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayAssignMathIndexAssignment(AArrayAssignMathIndexAssignment node)
    {
        InAArrayAssignMathIndexAssignment(node);
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetStartOb() != null)
        {
            node.GetStartOb().Apply(this);
        }
        if(node.GetStartCb() != null)
        {
            node.GetStartCb().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetEndOb() != null)
        {
            node.GetEndOb().Apply(this);
        }
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        if(node.GetEndCb() != null)
        {
            node.GetEndCb().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAArrayAssignMathIndexAssignment(node);
    }
    public virtual void InAArrayAssignAssignment(AArrayAssignAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayAssignAssignment(AArrayAssignAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayAssignAssignment(AArrayAssignAssignment node)
    {
        InAArrayAssignAssignment(node);
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetStartOb() != null)
        {
            node.GetStartOb().Apply(this);
        }
        if(node.GetInternalMath() != null)
        {
            node.GetInternalMath().Apply(this);
        }
        if(node.GetStartCb() != null)
        {
            node.GetStartCb().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetExternalMath() != null)
        {
            node.GetExternalMath().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAArrayAssignAssignment(node);
    }
    public virtual void InAIntdeclNumDeclare(AIntdeclNumDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntdeclNumDeclare(AIntdeclNumDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntdeclNumDeclare(AIntdeclNumDeclare node)
    {
        InAIntdeclNumDeclare(node);
        if(node.GetVarType() != null)
        {
            node.GetVarType().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetIntlit() != null)
        {
            node.GetIntlit().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAIntdeclNumDeclare(node);
    }
    public virtual void InAFloatdeclNumDeclare(AFloatdeclNumDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatdeclNumDeclare(AFloatdeclNumDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatdeclNumDeclare(AFloatdeclNumDeclare node)
    {
        InAFloatdeclNumDeclare(node);
        if(node.GetVarType() != null)
        {
            node.GetVarType().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetFloatlit() != null)
        {
            node.GetFloatlit().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAFloatdeclNumDeclare(node);
    }
    public virtual void InAArrayIndexNumDeclare(AArrayIndexNumDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayIndexNumDeclare(AArrayIndexNumDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayIndexNumDeclare(AArrayIndexNumDeclare node)
    {
        InAArrayIndexNumDeclare(node);
        if(node.GetVarType() != null)
        {
            node.GetVarType().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetIntlit() != null)
        {
            node.GetIntlit().Apply(this);
        }
        if(node.GetClosedbracket() != null)
        {
            node.GetClosedbracket().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAArrayIndexNumDeclare(node);
    }
    public virtual void InAIf(AIf node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIf(AIf node)
    {
        DefaultOut(node);
    }

    public override void CaseAIf(AIf node)
    {
        InAIf(node);
        if(node.GetIflit() != null)
        {
            node.GetIflit().Apply(this);
        }
        if(node.GetExpressions() != null)
        {
            node.GetExpressions().Apply(this);
        }
        if(node.GetOpencurl() != null)
        {
            node.GetOpencurl().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetClosecurl() != null)
        {
            node.GetClosecurl().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetElsepart() != null)
        {
            node.GetElsepart().Apply(this);
        }
        OutAIf(node);
    }
    public virtual void InAElseElsepart(AElseElsepart node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElseElsepart(AElseElsepart node)
    {
        DefaultOut(node);
    }

    public override void CaseAElseElsepart(AElseElsepart node)
    {
        InAElseElsepart(node);
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetOpencurl() != null)
        {
            node.GetOpencurl().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetClosecurl() != null)
        {
            node.GetClosecurl().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAElseElsepart(node);
    }
    public virtual void InANoElseElsepart(ANoElseElsepart node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoElseElsepart(ANoElseElsepart node)
    {
        DefaultOut(node);
    }

    public override void CaseANoElseElsepart(ANoElseElsepart node)
    {
        InANoElseElsepart(node);
        OutANoElseElsepart(node);
    }
    public virtual void InAWhile(AWhile node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhile(AWhile node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhile(AWhile node)
    {
        InAWhile(node);
        if(node.GetWhilelit() != null)
        {
            node.GetWhilelit().Apply(this);
        }
        if(node.GetExpressions() != null)
        {
            node.GetExpressions().Apply(this);
        }
        if(node.GetOpencurl() != null)
        {
            node.GetOpencurl().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetClosecurl() != null)
        {
            node.GetClosecurl().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAWhile(node);
    }
    public virtual void InAAndExpressions(AAndExpressions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndExpressions(AAndExpressions node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndExpressions(AAndExpressions node)
    {
        InAAndExpressions(node);
        if(node.GetExpressions() != null)
        {
            node.GetExpressions().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetLogicalCompare() != null)
        {
            node.GetLogicalCompare().Apply(this);
        }
        OutAAndExpressions(node);
    }
    public virtual void InAOrExpressions(AOrExpressions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrExpressions(AOrExpressions node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrExpressions(AOrExpressions node)
    {
        InAOrExpressions(node);
        if(node.GetExpressions() != null)
        {
            node.GetExpressions().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetLogicalCompare() != null)
        {
            node.GetLogicalCompare().Apply(this);
        }
        OutAOrExpressions(node);
    }
    public virtual void InANotExpressions(ANotExpressions node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotExpressions(ANotExpressions node)
    {
        DefaultOut(node);
    }

    public override void CaseANotExpressions(ANotExpressions node)
    {
        InANotExpressions(node);
        if(node.GetExpressions() != null)
        {
            node.GetExpressions().Apply(this);
        }
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        if(node.GetLogicalCompare() != null)
        {
            node.GetLogicalCompare().Apply(this);
        }
        OutANotExpressions(node);
    }
    public virtual void InANoLogOpExpressions(ANoLogOpExpressions node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoLogOpExpressions(ANoLogOpExpressions node)
    {
        DefaultOut(node);
    }

    public override void CaseANoLogOpExpressions(ANoLogOpExpressions node)
    {
        InANoLogOpExpressions(node);
        if(node.GetLogicalCompare() != null)
        {
            node.GetLogicalCompare().Apply(this);
        }
        OutANoLogOpExpressions(node);
    }
    public virtual void InAGreaterLogicalCompare(AGreaterLogicalCompare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterLogicalCompare(AGreaterLogicalCompare node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterLogicalCompare(AGreaterLogicalCompare node)
    {
        InAGreaterLogicalCompare(node);
        if(node.GetSide1() != null)
        {
            node.GetSide1().Apply(this);
        }
        if(node.GetGrtr() != null)
        {
            node.GetGrtr().Apply(this);
        }
        if(node.GetSide2() != null)
        {
            node.GetSide2().Apply(this);
        }
        OutAGreaterLogicalCompare(node);
    }
    public virtual void InALessThanLogicalCompare(ALessThanLogicalCompare node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessThanLogicalCompare(ALessThanLogicalCompare node)
    {
        DefaultOut(node);
    }

    public override void CaseALessThanLogicalCompare(ALessThanLogicalCompare node)
    {
        InALessThanLogicalCompare(node);
        if(node.GetSide1() != null)
        {
            node.GetSide1().Apply(this);
        }
        if(node.GetLessthan() != null)
        {
            node.GetLessthan().Apply(this);
        }
        if(node.GetSide2() != null)
        {
            node.GetSide2().Apply(this);
        }
        OutALessThanLogicalCompare(node);
    }
    public virtual void InAGreaterThanEqualToLogicalCompare(AGreaterThanEqualToLogicalCompare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterThanEqualToLogicalCompare(AGreaterThanEqualToLogicalCompare node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterThanEqualToLogicalCompare(AGreaterThanEqualToLogicalCompare node)
    {
        InAGreaterThanEqualToLogicalCompare(node);
        if(node.GetSide1() != null)
        {
            node.GetSide1().Apply(this);
        }
        if(node.GetGrtreqto() != null)
        {
            node.GetGrtreqto().Apply(this);
        }
        if(node.GetSide2() != null)
        {
            node.GetSide2().Apply(this);
        }
        OutAGreaterThanEqualToLogicalCompare(node);
    }
    public virtual void InALessThanEqualToLogicalCompare(ALessThanEqualToLogicalCompare node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessThanEqualToLogicalCompare(ALessThanEqualToLogicalCompare node)
    {
        DefaultOut(node);
    }

    public override void CaseALessThanEqualToLogicalCompare(ALessThanEqualToLogicalCompare node)
    {
        InALessThanEqualToLogicalCompare(node);
        if(node.GetSide1() != null)
        {
            node.GetSide1().Apply(this);
        }
        if(node.GetLesseqto() != null)
        {
            node.GetLesseqto().Apply(this);
        }
        if(node.GetSide2() != null)
        {
            node.GetSide2().Apply(this);
        }
        OutALessThanEqualToLogicalCompare(node);
    }
    public virtual void InAEqualToLogicalCompare(AEqualToLogicalCompare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualToLogicalCompare(AEqualToLogicalCompare node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualToLogicalCompare(AEqualToLogicalCompare node)
    {
        InAEqualToLogicalCompare(node);
        if(node.GetSide1() != null)
        {
            node.GetSide1().Apply(this);
        }
        if(node.GetEqto() != null)
        {
            node.GetEqto().Apply(this);
        }
        if(node.GetSide2() != null)
        {
            node.GetSide2().Apply(this);
        }
        OutAEqualToLogicalCompare(node);
    }
    public virtual void InANoLogCompareLogicalCompare(ANoLogCompareLogicalCompare node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoLogCompareLogicalCompare(ANoLogCompareLogicalCompare node)
    {
        DefaultOut(node);
    }

    public override void CaseANoLogCompareLogicalCompare(ANoLogCompareLogicalCompare node)
    {
        InANoLogCompareLogicalCompare(node);
        if(node.GetAddSub() != null)
        {
            node.GetAddSub().Apply(this);
        }
        OutANoLogCompareLogicalCompare(node);
    }
    public virtual void InAAddAddSub(AAddAddSub node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddAddSub(AAddAddSub node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddAddSub(AAddAddSub node)
    {
        InAAddAddSub(node);
        if(node.GetAddSub() != null)
        {
            node.GetAddSub().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetMultiDiv() != null)
        {
            node.GetMultiDiv().Apply(this);
        }
        OutAAddAddSub(node);
    }
    public virtual void InASubtractAddSub(ASubtractAddSub node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractAddSub(ASubtractAddSub node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractAddSub(ASubtractAddSub node)
    {
        InASubtractAddSub(node);
        if(node.GetAddSub() != null)
        {
            node.GetAddSub().Apply(this);
        }
        if(node.GetSub() != null)
        {
            node.GetSub().Apply(this);
        }
        if(node.GetMultiDiv() != null)
        {
            node.GetMultiDiv().Apply(this);
        }
        OutASubtractAddSub(node);
    }
    public virtual void InANoMoreAddSubAddSub(ANoMoreAddSubAddSub node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoMoreAddSubAddSub(ANoMoreAddSubAddSub node)
    {
        DefaultOut(node);
    }

    public override void CaseANoMoreAddSubAddSub(ANoMoreAddSubAddSub node)
    {
        InANoMoreAddSubAddSub(node);
        if(node.GetMultiDiv() != null)
        {
            node.GetMultiDiv().Apply(this);
        }
        OutANoMoreAddSubAddSub(node);
    }
    public virtual void InAMultiplyMultiDiv(AMultiplyMultiDiv node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyMultiDiv(AMultiplyMultiDiv node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyMultiDiv(AMultiplyMultiDiv node)
    {
        InAMultiplyMultiDiv(node);
        if(node.GetMultiDiv() != null)
        {
            node.GetMultiDiv().Apply(this);
        }
        if(node.GetMulti() != null)
        {
            node.GetMulti().Apply(this);
        }
        if(node.GetParenth() != null)
        {
            node.GetParenth().Apply(this);
        }
        OutAMultiplyMultiDiv(node);
    }
    public virtual void InADivideMultiDiv(ADivideMultiDiv node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideMultiDiv(ADivideMultiDiv node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideMultiDiv(ADivideMultiDiv node)
    {
        InADivideMultiDiv(node);
        if(node.GetMultiDiv() != null)
        {
            node.GetMultiDiv().Apply(this);
        }
        if(node.GetDiv() != null)
        {
            node.GetDiv().Apply(this);
        }
        if(node.GetParenth() != null)
        {
            node.GetParenth().Apply(this);
        }
        OutADivideMultiDiv(node);
    }
    public virtual void InANoMoreDivMultiMultiDiv(ANoMoreDivMultiMultiDiv node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoMoreDivMultiMultiDiv(ANoMoreDivMultiMultiDiv node)
    {
        DefaultOut(node);
    }

    public override void CaseANoMoreDivMultiMultiDiv(ANoMoreDivMultiMultiDiv node)
    {
        InANoMoreDivMultiMultiDiv(node);
        if(node.GetParenth() != null)
        {
            node.GetParenth().Apply(this);
        }
        OutANoMoreDivMultiMultiDiv(node);
    }
    public virtual void InAParenthParenth(AParenthParenth node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthParenth(AParenthParenth node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthParenth(AParenthParenth node)
    {
        InAParenthParenth(node);
        if(node.GetOpenparenth() != null)
        {
            node.GetOpenparenth().Apply(this);
        }
        if(node.GetExpressions() != null)
        {
            node.GetExpressions().Apply(this);
        }
        if(node.GetClosedparenth() != null)
        {
            node.GetClosedparenth().Apply(this);
        }
        OutAParenthParenth(node);
    }
    public virtual void InAIntParenth(AIntParenth node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntParenth(AIntParenth node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntParenth(AIntParenth node)
    {
        InAIntParenth(node);
        if(node.GetIntlit() != null)
        {
            node.GetIntlit().Apply(this);
        }
        OutAIntParenth(node);
    }
    public virtual void InAFloatParenth(AFloatParenth node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatParenth(AFloatParenth node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatParenth(AFloatParenth node)
    {
        InAFloatParenth(node);
        if(node.GetFloatlit() != null)
        {
            node.GetFloatlit().Apply(this);
        }
        OutAFloatParenth(node);
    }
    public virtual void InAArrayParenth(AArrayParenth node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayParenth(AArrayParenth node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayParenth(AArrayParenth node)
    {
        InAArrayParenth(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetExpressions() != null)
        {
            node.GetExpressions().Apply(this);
        }
        if(node.GetClosedbracket() != null)
        {
            node.GetClosedbracket().Apply(this);
        }
        OutAArrayParenth(node);
    }
    public virtual void InAVariableParenth(AVariableParenth node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableParenth(AVariableParenth node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableParenth(AVariableParenth node)
    {
        InAVariableParenth(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableParenth(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetMethods() != null)
        {
            node.GetMethods().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAManyConstants(AManyConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAManyConstants(AManyConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAManyConstants(AManyConstants node)
    {
        InAManyConstants(node);
        if(node.GetConstDeclare() != null)
        {
            node.GetConstDeclare().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAManyConstants(node);
    }
    public virtual void InANothingConstants(ANothingConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutANothingConstants(ANothingConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseANothingConstants(ANothingConstants node)
    {
        InANothingConstants(node);
        OutANothingConstants(node);
    }
    public virtual void InAIntdeclConstDeclare(AIntdeclConstDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntdeclConstDeclare(AIntdeclConstDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntdeclConstDeclare(AIntdeclConstDeclare node)
    {
        InAIntdeclConstDeclare(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetIntlit() != null)
        {
            node.GetIntlit().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetVarType() != null)
        {
            node.GetVarType().Apply(this);
        }
        if(node.GetConstantLit() != null)
        {
            node.GetConstantLit().Apply(this);
        }
        OutAIntdeclConstDeclare(node);
    }
    public virtual void InAFloatdeclConstDeclare(AFloatdeclConstDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatdeclConstDeclare(AFloatdeclConstDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatdeclConstDeclare(AFloatdeclConstDeclare node)
    {
        InAFloatdeclConstDeclare(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetFloatlit() != null)
        {
            node.GetFloatlit().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetVarType() != null)
        {
            node.GetVarType().Apply(this);
        }
        if(node.GetConstantLit() != null)
        {
            node.GetConstantLit().Apply(this);
        }
        OutAFloatdeclConstDeclare(node);
    }
    public virtual void InAManyMethodsMethods(AManyMethodsMethods node)
    {
        DefaultIn(node);
    }

    public virtual void OutAManyMethodsMethods(AManyMethodsMethods node)
    {
        DefaultOut(node);
    }

    public override void CaseAManyMethodsMethods(AManyMethodsMethods node)
    {
        InAManyMethodsMethods(node);
        if(node.GetMethod() != null)
        {
            node.GetMethod().Apply(this);
        }
        if(node.GetMethods() != null)
        {
            node.GetMethods().Apply(this);
        }
        OutAManyMethodsMethods(node);
    }
    public virtual void InALastMethodMethods(ALastMethodMethods node)
    {
        DefaultIn(node);
    }

    public virtual void OutALastMethodMethods(ALastMethodMethods node)
    {
        DefaultOut(node);
    }

    public override void CaseALastMethodMethods(ALastMethodMethods node)
    {
        InALastMethodMethods(node);
        if(node.GetMethod() != null)
        {
            node.GetMethod().Apply(this);
        }
        OutALastMethodMethods(node);
    }
    public virtual void InAMethod(AMethod node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethod(AMethod node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethod(AMethod node)
    {
        InAMethod(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetClosecurl() != null)
        {
            node.GetClosecurl().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpencurl() != null)
        {
            node.GetOpencurl().Apply(this);
        }
        if(node.GetClosedparenth() != null)
        {
            node.GetClosedparenth().Apply(this);
        }
        if(node.GetFormalParameters() != null)
        {
            node.GetFormalParameters().Apply(this);
        }
        if(node.GetOpenparenth() != null)
        {
            node.GetOpenparenth().Apply(this);
        }
        if(node.GetMethodName() != null)
        {
            node.GetMethodName().Apply(this);
        }
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        OutAMethod(node);
    }
    public virtual void InAMethodCall(AMethodCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodCall(AMethodCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodCall(AMethodCall node)
    {
        InAMethodCall(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetClosedparenth() != null)
        {
            node.GetClosedparenth().Apply(this);
        }
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        if(node.GetOpenparenth() != null)
        {
            node.GetOpenparenth().Apply(this);
        }
        if(node.GetMethodName() != null)
        {
            node.GetMethodName().Apply(this);
        }
        OutAMethodCall(node);
    }
    public virtual void InAStringParamActualParameters(AStringParamActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringParamActualParameters(AStringParamActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringParamActualParameters(AStringParamActualParameters node)
    {
        InAStringParamActualParameters(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        OutAStringParamActualParameters(node);
    }
    public virtual void InAIntParametersActualParameters(AIntParametersActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntParametersActualParameters(AIntParametersActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntParametersActualParameters(AIntParametersActualParameters node)
    {
        InAIntParametersActualParameters(node);
        if(node.GetIntlit() != null)
        {
            node.GetIntlit().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        OutAIntParametersActualParameters(node);
    }
    public virtual void InAFloatParametersActualParameters(AFloatParametersActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatParametersActualParameters(AFloatParametersActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatParametersActualParameters(AFloatParametersActualParameters node)
    {
        InAFloatParametersActualParameters(node);
        if(node.GetFloatlit() != null)
        {
            node.GetFloatlit().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        OutAFloatParametersActualParameters(node);
    }
    public virtual void InAVarParametersActualParameters(AVarParametersActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarParametersActualParameters(AVarParametersActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarParametersActualParameters(AVarParametersActualParameters node)
    {
        InAVarParametersActualParameters(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        OutAVarParametersActualParameters(node);
    }
    public virtual void InAStringActualParameters(AStringActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringActualParameters(AStringActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringActualParameters(AStringActualParameters node)
    {
        InAStringActualParameters(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringActualParameters(node);
    }
    public virtual void InAVariableActualParameters(AVariableActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableActualParameters(AVariableActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableActualParameters(AVariableActualParameters node)
    {
        InAVariableActualParameters(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableActualParameters(node);
    }
    public virtual void InAIntActualParameters(AIntActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntActualParameters(AIntActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntActualParameters(AIntActualParameters node)
    {
        InAIntActualParameters(node);
        if(node.GetIntlit() != null)
        {
            node.GetIntlit().Apply(this);
        }
        OutAIntActualParameters(node);
    }
    public virtual void InAFloatActualParameters(AFloatActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatActualParameters(AFloatActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatActualParameters(AFloatActualParameters node)
    {
        InAFloatActualParameters(node);
        if(node.GetFloatlit() != null)
        {
            node.GetFloatlit().Apply(this);
        }
        OutAFloatActualParameters(node);
    }
    public virtual void InANothingActualParameters(ANothingActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANothingActualParameters(ANothingActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANothingActualParameters(ANothingActualParameters node)
    {
        InANothingActualParameters(node);
        OutANothingActualParameters(node);
    }
    public virtual void InAManyParametersFormalParameters(AManyParametersFormalParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAManyParametersFormalParameters(AManyParametersFormalParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAManyParametersFormalParameters(AManyParametersFormalParameters node)
    {
        InAManyParametersFormalParameters(node);
        if(node.GetFormalParameters() != null)
        {
            node.GetFormalParameters().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetVarType() != null)
        {
            node.GetVarType().Apply(this);
        }
        OutAManyParametersFormalParameters(node);
    }
    public virtual void InAFinalParameterFormalParameters(AFinalParameterFormalParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFinalParameterFormalParameters(AFinalParameterFormalParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAFinalParameterFormalParameters(AFinalParameterFormalParameters node)
    {
        InAFinalParameterFormalParameters(node);
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetVarType() != null)
        {
            node.GetVarType().Apply(this);
        }
        OutAFinalParameterFormalParameters(node);
    }
    public virtual void InAManyStatementsStatements(AManyStatementsStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAManyStatementsStatements(AManyStatementsStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAManyStatementsStatements(AManyStatementsStatements node)
    {
        InAManyStatementsStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        OutAManyStatementsStatements(node);
    }
    public virtual void InAOneStatementStatements(AOneStatementStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneStatementStatements(AOneStatementStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneStatementStatements(AOneStatementStatements node)
    {
        InAOneStatementStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAOneStatementStatements(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InANumDeclareStatement(ANumDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumDeclareStatement(ANumDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseANumDeclareStatement(ANumDeclareStatement node)
    {
        InANumDeclareStatement(node);
        if(node.GetNumDeclare() != null)
        {
            node.GetNumDeclare().Apply(this);
        }
        OutANumDeclareStatement(node);
    }
    public virtual void InAMethodCallStatement(AMethodCallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodCallStatement(AMethodCallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodCallStatement(AMethodCallStatement node)
    {
        InAMethodCallStatement(node);
        if(node.GetMethodCall() != null)
        {
            node.GetMethodCall().Apply(this);
        }
        OutAMethodCallStatement(node);
    }
    public virtual void InAIfStatement(AIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatement(AIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatement(AIfStatement node)
    {
        InAIfStatement(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutAIfStatement(node);
    }
    public virtual void InAWhileStatement(AWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatement(AWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatement(AWhileStatement node)
    {
        InAWhileStatement(node);
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        OutAWhileStatement(node);
    }
    public virtual void InAAssignIntAssignment(AAssignIntAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignIntAssignment(AAssignIntAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignIntAssignment(AAssignIntAssignment node)
    {
        InAAssignIntAssignment(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetExpressions() != null)
        {
            node.GetExpressions().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetIntName() != null)
        {
            node.GetIntName().Apply(this);
        }
        OutAAssignIntAssignment(node);
    }
    public virtual void InAVarDeclareAssignment(AVarDeclareAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarDeclareAssignment(AVarDeclareAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarDeclareAssignment(AVarDeclareAssignment node)
    {
        InAVarDeclareAssignment(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetVarType() != null)
        {
            node.GetVarType().Apply(this);
        }
        OutAVarDeclareAssignment(node);
    }
    public virtual void InAArrayAssignMathIndexAssignment(AArrayAssignMathIndexAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayAssignMathIndexAssignment(AArrayAssignMathIndexAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayAssignMathIndexAssignment(AArrayAssignMathIndexAssignment node)
    {
        InAArrayAssignMathIndexAssignment(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetEndCb() != null)
        {
            node.GetEndCb().Apply(this);
        }
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        if(node.GetEndOb() != null)
        {
            node.GetEndOb().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetStartCb() != null)
        {
            node.GetStartCb().Apply(this);
        }
        if(node.GetStartOb() != null)
        {
            node.GetStartOb().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        OutAArrayAssignMathIndexAssignment(node);
    }
    public virtual void InAArrayAssignAssignment(AArrayAssignAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayAssignAssignment(AArrayAssignAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayAssignAssignment(AArrayAssignAssignment node)
    {
        InAArrayAssignAssignment(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetExternalMath() != null)
        {
            node.GetExternalMath().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetStartCb() != null)
        {
            node.GetStartCb().Apply(this);
        }
        if(node.GetInternalMath() != null)
        {
            node.GetInternalMath().Apply(this);
        }
        if(node.GetStartOb() != null)
        {
            node.GetStartOb().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        OutAArrayAssignAssignment(node);
    }
    public virtual void InAIntdeclNumDeclare(AIntdeclNumDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntdeclNumDeclare(AIntdeclNumDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntdeclNumDeclare(AIntdeclNumDeclare node)
    {
        InAIntdeclNumDeclare(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetIntlit() != null)
        {
            node.GetIntlit().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetVarType() != null)
        {
            node.GetVarType().Apply(this);
        }
        OutAIntdeclNumDeclare(node);
    }
    public virtual void InAFloatdeclNumDeclare(AFloatdeclNumDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatdeclNumDeclare(AFloatdeclNumDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatdeclNumDeclare(AFloatdeclNumDeclare node)
    {
        InAFloatdeclNumDeclare(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetFloatlit() != null)
        {
            node.GetFloatlit().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetVarType() != null)
        {
            node.GetVarType().Apply(this);
        }
        OutAFloatdeclNumDeclare(node);
    }
    public virtual void InAArrayIndexNumDeclare(AArrayIndexNumDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayIndexNumDeclare(AArrayIndexNumDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayIndexNumDeclare(AArrayIndexNumDeclare node)
    {
        InAArrayIndexNumDeclare(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetClosedbracket() != null)
        {
            node.GetClosedbracket().Apply(this);
        }
        if(node.GetIntlit() != null)
        {
            node.GetIntlit().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetVarType() != null)
        {
            node.GetVarType().Apply(this);
        }
        OutAArrayIndexNumDeclare(node);
    }
    public virtual void InAIf(AIf node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIf(AIf node)
    {
        DefaultOut(node);
    }

    public override void CaseAIf(AIf node)
    {
        InAIf(node);
        if(node.GetElsepart() != null)
        {
            node.GetElsepart().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetClosecurl() != null)
        {
            node.GetClosecurl().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpencurl() != null)
        {
            node.GetOpencurl().Apply(this);
        }
        if(node.GetExpressions() != null)
        {
            node.GetExpressions().Apply(this);
        }
        if(node.GetIflit() != null)
        {
            node.GetIflit().Apply(this);
        }
        OutAIf(node);
    }
    public virtual void InAElseElsepart(AElseElsepart node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElseElsepart(AElseElsepart node)
    {
        DefaultOut(node);
    }

    public override void CaseAElseElsepart(AElseElsepart node)
    {
        InAElseElsepart(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetClosecurl() != null)
        {
            node.GetClosecurl().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpencurl() != null)
        {
            node.GetOpencurl().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        OutAElseElsepart(node);
    }
    public virtual void InANoElseElsepart(ANoElseElsepart node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoElseElsepart(ANoElseElsepart node)
    {
        DefaultOut(node);
    }

    public override void CaseANoElseElsepart(ANoElseElsepart node)
    {
        InANoElseElsepart(node);
        OutANoElseElsepart(node);
    }
    public virtual void InAWhile(AWhile node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhile(AWhile node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhile(AWhile node)
    {
        InAWhile(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetClosecurl() != null)
        {
            node.GetClosecurl().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpencurl() != null)
        {
            node.GetOpencurl().Apply(this);
        }
        if(node.GetExpressions() != null)
        {
            node.GetExpressions().Apply(this);
        }
        if(node.GetWhilelit() != null)
        {
            node.GetWhilelit().Apply(this);
        }
        OutAWhile(node);
    }
    public virtual void InAAndExpressions(AAndExpressions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndExpressions(AAndExpressions node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndExpressions(AAndExpressions node)
    {
        InAAndExpressions(node);
        if(node.GetLogicalCompare() != null)
        {
            node.GetLogicalCompare().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetExpressions() != null)
        {
            node.GetExpressions().Apply(this);
        }
        OutAAndExpressions(node);
    }
    public virtual void InAOrExpressions(AOrExpressions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrExpressions(AOrExpressions node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrExpressions(AOrExpressions node)
    {
        InAOrExpressions(node);
        if(node.GetLogicalCompare() != null)
        {
            node.GetLogicalCompare().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetExpressions() != null)
        {
            node.GetExpressions().Apply(this);
        }
        OutAOrExpressions(node);
    }
    public virtual void InANotExpressions(ANotExpressions node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotExpressions(ANotExpressions node)
    {
        DefaultOut(node);
    }

    public override void CaseANotExpressions(ANotExpressions node)
    {
        InANotExpressions(node);
        if(node.GetLogicalCompare() != null)
        {
            node.GetLogicalCompare().Apply(this);
        }
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        if(node.GetExpressions() != null)
        {
            node.GetExpressions().Apply(this);
        }
        OutANotExpressions(node);
    }
    public virtual void InANoLogOpExpressions(ANoLogOpExpressions node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoLogOpExpressions(ANoLogOpExpressions node)
    {
        DefaultOut(node);
    }

    public override void CaseANoLogOpExpressions(ANoLogOpExpressions node)
    {
        InANoLogOpExpressions(node);
        if(node.GetLogicalCompare() != null)
        {
            node.GetLogicalCompare().Apply(this);
        }
        OutANoLogOpExpressions(node);
    }
    public virtual void InAGreaterLogicalCompare(AGreaterLogicalCompare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterLogicalCompare(AGreaterLogicalCompare node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterLogicalCompare(AGreaterLogicalCompare node)
    {
        InAGreaterLogicalCompare(node);
        if(node.GetSide2() != null)
        {
            node.GetSide2().Apply(this);
        }
        if(node.GetGrtr() != null)
        {
            node.GetGrtr().Apply(this);
        }
        if(node.GetSide1() != null)
        {
            node.GetSide1().Apply(this);
        }
        OutAGreaterLogicalCompare(node);
    }
    public virtual void InALessThanLogicalCompare(ALessThanLogicalCompare node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessThanLogicalCompare(ALessThanLogicalCompare node)
    {
        DefaultOut(node);
    }

    public override void CaseALessThanLogicalCompare(ALessThanLogicalCompare node)
    {
        InALessThanLogicalCompare(node);
        if(node.GetSide2() != null)
        {
            node.GetSide2().Apply(this);
        }
        if(node.GetLessthan() != null)
        {
            node.GetLessthan().Apply(this);
        }
        if(node.GetSide1() != null)
        {
            node.GetSide1().Apply(this);
        }
        OutALessThanLogicalCompare(node);
    }
    public virtual void InAGreaterThanEqualToLogicalCompare(AGreaterThanEqualToLogicalCompare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterThanEqualToLogicalCompare(AGreaterThanEqualToLogicalCompare node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterThanEqualToLogicalCompare(AGreaterThanEqualToLogicalCompare node)
    {
        InAGreaterThanEqualToLogicalCompare(node);
        if(node.GetSide2() != null)
        {
            node.GetSide2().Apply(this);
        }
        if(node.GetGrtreqto() != null)
        {
            node.GetGrtreqto().Apply(this);
        }
        if(node.GetSide1() != null)
        {
            node.GetSide1().Apply(this);
        }
        OutAGreaterThanEqualToLogicalCompare(node);
    }
    public virtual void InALessThanEqualToLogicalCompare(ALessThanEqualToLogicalCompare node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessThanEqualToLogicalCompare(ALessThanEqualToLogicalCompare node)
    {
        DefaultOut(node);
    }

    public override void CaseALessThanEqualToLogicalCompare(ALessThanEqualToLogicalCompare node)
    {
        InALessThanEqualToLogicalCompare(node);
        if(node.GetSide2() != null)
        {
            node.GetSide2().Apply(this);
        }
        if(node.GetLesseqto() != null)
        {
            node.GetLesseqto().Apply(this);
        }
        if(node.GetSide1() != null)
        {
            node.GetSide1().Apply(this);
        }
        OutALessThanEqualToLogicalCompare(node);
    }
    public virtual void InAEqualToLogicalCompare(AEqualToLogicalCompare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualToLogicalCompare(AEqualToLogicalCompare node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualToLogicalCompare(AEqualToLogicalCompare node)
    {
        InAEqualToLogicalCompare(node);
        if(node.GetSide2() != null)
        {
            node.GetSide2().Apply(this);
        }
        if(node.GetEqto() != null)
        {
            node.GetEqto().Apply(this);
        }
        if(node.GetSide1() != null)
        {
            node.GetSide1().Apply(this);
        }
        OutAEqualToLogicalCompare(node);
    }
    public virtual void InANoLogCompareLogicalCompare(ANoLogCompareLogicalCompare node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoLogCompareLogicalCompare(ANoLogCompareLogicalCompare node)
    {
        DefaultOut(node);
    }

    public override void CaseANoLogCompareLogicalCompare(ANoLogCompareLogicalCompare node)
    {
        InANoLogCompareLogicalCompare(node);
        if(node.GetAddSub() != null)
        {
            node.GetAddSub().Apply(this);
        }
        OutANoLogCompareLogicalCompare(node);
    }
    public virtual void InAAddAddSub(AAddAddSub node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddAddSub(AAddAddSub node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddAddSub(AAddAddSub node)
    {
        InAAddAddSub(node);
        if(node.GetMultiDiv() != null)
        {
            node.GetMultiDiv().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetAddSub() != null)
        {
            node.GetAddSub().Apply(this);
        }
        OutAAddAddSub(node);
    }
    public virtual void InASubtractAddSub(ASubtractAddSub node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractAddSub(ASubtractAddSub node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractAddSub(ASubtractAddSub node)
    {
        InASubtractAddSub(node);
        if(node.GetMultiDiv() != null)
        {
            node.GetMultiDiv().Apply(this);
        }
        if(node.GetSub() != null)
        {
            node.GetSub().Apply(this);
        }
        if(node.GetAddSub() != null)
        {
            node.GetAddSub().Apply(this);
        }
        OutASubtractAddSub(node);
    }
    public virtual void InANoMoreAddSubAddSub(ANoMoreAddSubAddSub node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoMoreAddSubAddSub(ANoMoreAddSubAddSub node)
    {
        DefaultOut(node);
    }

    public override void CaseANoMoreAddSubAddSub(ANoMoreAddSubAddSub node)
    {
        InANoMoreAddSubAddSub(node);
        if(node.GetMultiDiv() != null)
        {
            node.GetMultiDiv().Apply(this);
        }
        OutANoMoreAddSubAddSub(node);
    }
    public virtual void InAMultiplyMultiDiv(AMultiplyMultiDiv node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyMultiDiv(AMultiplyMultiDiv node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyMultiDiv(AMultiplyMultiDiv node)
    {
        InAMultiplyMultiDiv(node);
        if(node.GetParenth() != null)
        {
            node.GetParenth().Apply(this);
        }
        if(node.GetMulti() != null)
        {
            node.GetMulti().Apply(this);
        }
        if(node.GetMultiDiv() != null)
        {
            node.GetMultiDiv().Apply(this);
        }
        OutAMultiplyMultiDiv(node);
    }
    public virtual void InADivideMultiDiv(ADivideMultiDiv node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideMultiDiv(ADivideMultiDiv node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideMultiDiv(ADivideMultiDiv node)
    {
        InADivideMultiDiv(node);
        if(node.GetParenth() != null)
        {
            node.GetParenth().Apply(this);
        }
        if(node.GetDiv() != null)
        {
            node.GetDiv().Apply(this);
        }
        if(node.GetMultiDiv() != null)
        {
            node.GetMultiDiv().Apply(this);
        }
        OutADivideMultiDiv(node);
    }
    public virtual void InANoMoreDivMultiMultiDiv(ANoMoreDivMultiMultiDiv node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoMoreDivMultiMultiDiv(ANoMoreDivMultiMultiDiv node)
    {
        DefaultOut(node);
    }

    public override void CaseANoMoreDivMultiMultiDiv(ANoMoreDivMultiMultiDiv node)
    {
        InANoMoreDivMultiMultiDiv(node);
        if(node.GetParenth() != null)
        {
            node.GetParenth().Apply(this);
        }
        OutANoMoreDivMultiMultiDiv(node);
    }
    public virtual void InAParenthParenth(AParenthParenth node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthParenth(AParenthParenth node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthParenth(AParenthParenth node)
    {
        InAParenthParenth(node);
        if(node.GetClosedparenth() != null)
        {
            node.GetClosedparenth().Apply(this);
        }
        if(node.GetExpressions() != null)
        {
            node.GetExpressions().Apply(this);
        }
        if(node.GetOpenparenth() != null)
        {
            node.GetOpenparenth().Apply(this);
        }
        OutAParenthParenth(node);
    }
    public virtual void InAIntParenth(AIntParenth node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntParenth(AIntParenth node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntParenth(AIntParenth node)
    {
        InAIntParenth(node);
        if(node.GetIntlit() != null)
        {
            node.GetIntlit().Apply(this);
        }
        OutAIntParenth(node);
    }
    public virtual void InAFloatParenth(AFloatParenth node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatParenth(AFloatParenth node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatParenth(AFloatParenth node)
    {
        InAFloatParenth(node);
        if(node.GetFloatlit() != null)
        {
            node.GetFloatlit().Apply(this);
        }
        OutAFloatParenth(node);
    }
    public virtual void InAArrayParenth(AArrayParenth node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayParenth(AArrayParenth node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayParenth(AArrayParenth node)
    {
        InAArrayParenth(node);
        if(node.GetClosedbracket() != null)
        {
            node.GetClosedbracket().Apply(this);
        }
        if(node.GetExpressions() != null)
        {
            node.GetExpressions().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAArrayParenth(node);
    }
    public virtual void InAVariableParenth(AVariableParenth node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableParenth(AVariableParenth node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableParenth(AVariableParenth node)
    {
        InAVariableParenth(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableParenth(node);
    }
}
} // namespace comp5210.analysis
