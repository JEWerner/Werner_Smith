/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  comp5210.analysis;

namespace comp5210.node {

public abstract class PProgram : Node
{
}

public abstract class PConstants : Node
{
}

public abstract class PConstDeclare : Node
{
}

public abstract class PMethods : Node
{
}

public abstract class PMethod : Node
{
}

public abstract class PMethodCall : Node
{
}

public abstract class PActualParameters : Node
{
}

public abstract class PFormalParameters : Node
{
}

public abstract class PStatements : Node
{
}

public abstract class PStatement : Node
{
}

public abstract class PAssignment : Node
{
}

public abstract class PNumDeclare : Node
{
}

public abstract class PIf : Node
{
}

public abstract class PElsepart : Node
{
}

public abstract class PWhile : Node
{
}

public abstract class PExpressions : Node
{
}

public abstract class PLogicalCompare : Node
{
}

public abstract class PAddSub : Node
{
}

public abstract class PMultiDiv : Node
{
}

public abstract class PParenth : Node
{
}


public sealed class AProgram : PProgram
{
    private PConstants _constants_;
    private PMethods _methods_;

    public AProgram ()
    {
    }

    public AProgram (
            PConstants _constants_,
            PMethods _methods_
    )
    {
        SetConstants (_constants_);
        SetMethods (_methods_);
    }

    public override Object Clone()
    {
        return new AProgram (
            (PConstants)CloneNode (_constants_),
            (PMethods)CloneNode (_methods_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgram(this);
    }

    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }
    public PMethods GetMethods ()
    {
        return _methods_;
    }

    public void SetMethods (PMethods node)
    {
        if(_methods_ != null)
        {
            _methods_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _methods_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constants_)
            + ToString (_methods_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
        if ( _methods_ == child )
        {
            _methods_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
        if ( _methods_ == oldChild )
        {
            SetMethods ((PMethods) newChild);
            return;
        }
    }

}
public sealed class AManyConstants : PConstants
{
    private PConstants _constants_;
    private PConstDeclare _const_declare_;

    public AManyConstants ()
    {
    }

    public AManyConstants (
            PConstants _constants_,
            PConstDeclare _const_declare_
    )
    {
        SetConstants (_constants_);
        SetConstDeclare (_const_declare_);
    }

    public override Object Clone()
    {
        return new AManyConstants (
            (PConstants)CloneNode (_constants_),
            (PConstDeclare)CloneNode (_const_declare_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAManyConstants(this);
    }

    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }
    public PConstDeclare GetConstDeclare ()
    {
        return _const_declare_;
    }

    public void SetConstDeclare (PConstDeclare node)
    {
        if(_const_declare_ != null)
        {
            _const_declare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _const_declare_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constants_)
            + ToString (_const_declare_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
        if ( _const_declare_ == child )
        {
            _const_declare_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
        if ( _const_declare_ == oldChild )
        {
            SetConstDeclare ((PConstDeclare) newChild);
            return;
        }
    }

}
public sealed class ANothingConstants : PConstants
{


    public ANothingConstants (
    )
    {
    }

    public override Object Clone()
    {
        return new ANothingConstants (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANothingConstants(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AIntdeclConstDeclare : PConstDeclare
{
    private TConstantLit _constant_lit_;
    private TId _var_type_;
    private TId _var_name_;
    private TEqual _equal_;
    private TIntlit _intlit_;
    private TSemicolon _semicolon_;

    public AIntdeclConstDeclare ()
    {
    }

    public AIntdeclConstDeclare (
            TConstantLit _constant_lit_,
            TId _var_type_,
            TId _var_name_,
            TEqual _equal_,
            TIntlit _intlit_,
            TSemicolon _semicolon_
    )
    {
        SetConstantLit (_constant_lit_);
        SetVarType (_var_type_);
        SetVarName (_var_name_);
        SetEqual (_equal_);
        SetIntlit (_intlit_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AIntdeclConstDeclare (
            (TConstantLit)CloneNode (_constant_lit_),
            (TId)CloneNode (_var_type_),
            (TId)CloneNode (_var_name_),
            (TEqual)CloneNode (_equal_),
            (TIntlit)CloneNode (_intlit_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntdeclConstDeclare(this);
    }

    public TConstantLit GetConstantLit ()
    {
        return _constant_lit_;
    }

    public void SetConstantLit (TConstantLit node)
    {
        if(_constant_lit_ != null)
        {
            _constant_lit_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_lit_ = node;
    }
    public TId GetVarType ()
    {
        return _var_type_;
    }

    public void SetVarType (TId node)
    {
        if(_var_type_ != null)
        {
            _var_type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_type_ = node;
    }
    public TId GetVarName ()
    {
        return _var_name_;
    }

    public void SetVarName (TId node)
    {
        if(_var_name_ != null)
        {
            _var_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_name_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public TIntlit GetIntlit ()
    {
        return _intlit_;
    }

    public void SetIntlit (TIntlit node)
    {
        if(_intlit_ != null)
        {
            _intlit_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _intlit_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_lit_)
            + ToString (_var_type_)
            + ToString (_var_name_)
            + ToString (_equal_)
            + ToString (_intlit_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_lit_ == child )
        {
            _constant_lit_ = null;
            return;
        }
        if ( _var_type_ == child )
        {
            _var_type_ = null;
            return;
        }
        if ( _var_name_ == child )
        {
            _var_name_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _intlit_ == child )
        {
            _intlit_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constant_lit_ == oldChild )
        {
            SetConstantLit ((TConstantLit) newChild);
            return;
        }
        if ( _var_type_ == oldChild )
        {
            SetVarType ((TId) newChild);
            return;
        }
        if ( _var_name_ == oldChild )
        {
            SetVarName ((TId) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _intlit_ == oldChild )
        {
            SetIntlit ((TIntlit) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AFloatdeclConstDeclare : PConstDeclare
{
    private TConstantLit _constant_lit_;
    private TId _var_type_;
    private TId _var_name_;
    private TEqual _equal_;
    private TFloatlit _floatlit_;
    private TSemicolon _semicolon_;

    public AFloatdeclConstDeclare ()
    {
    }

    public AFloatdeclConstDeclare (
            TConstantLit _constant_lit_,
            TId _var_type_,
            TId _var_name_,
            TEqual _equal_,
            TFloatlit _floatlit_,
            TSemicolon _semicolon_
    )
    {
        SetConstantLit (_constant_lit_);
        SetVarType (_var_type_);
        SetVarName (_var_name_);
        SetEqual (_equal_);
        SetFloatlit (_floatlit_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AFloatdeclConstDeclare (
            (TConstantLit)CloneNode (_constant_lit_),
            (TId)CloneNode (_var_type_),
            (TId)CloneNode (_var_name_),
            (TEqual)CloneNode (_equal_),
            (TFloatlit)CloneNode (_floatlit_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatdeclConstDeclare(this);
    }

    public TConstantLit GetConstantLit ()
    {
        return _constant_lit_;
    }

    public void SetConstantLit (TConstantLit node)
    {
        if(_constant_lit_ != null)
        {
            _constant_lit_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_lit_ = node;
    }
    public TId GetVarType ()
    {
        return _var_type_;
    }

    public void SetVarType (TId node)
    {
        if(_var_type_ != null)
        {
            _var_type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_type_ = node;
    }
    public TId GetVarName ()
    {
        return _var_name_;
    }

    public void SetVarName (TId node)
    {
        if(_var_name_ != null)
        {
            _var_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_name_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public TFloatlit GetFloatlit ()
    {
        return _floatlit_;
    }

    public void SetFloatlit (TFloatlit node)
    {
        if(_floatlit_ != null)
        {
            _floatlit_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _floatlit_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_lit_)
            + ToString (_var_type_)
            + ToString (_var_name_)
            + ToString (_equal_)
            + ToString (_floatlit_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_lit_ == child )
        {
            _constant_lit_ = null;
            return;
        }
        if ( _var_type_ == child )
        {
            _var_type_ = null;
            return;
        }
        if ( _var_name_ == child )
        {
            _var_name_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _floatlit_ == child )
        {
            _floatlit_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constant_lit_ == oldChild )
        {
            SetConstantLit ((TConstantLit) newChild);
            return;
        }
        if ( _var_type_ == oldChild )
        {
            SetVarType ((TId) newChild);
            return;
        }
        if ( _var_name_ == oldChild )
        {
            SetVarName ((TId) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _floatlit_ == oldChild )
        {
            SetFloatlit ((TFloatlit) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AManyMethodsMethods : PMethods
{
    private PMethods _methods_;
    private PMethod _method_;

    public AManyMethodsMethods ()
    {
    }

    public AManyMethodsMethods (
            PMethods _methods_,
            PMethod _method_
    )
    {
        SetMethods (_methods_);
        SetMethod (_method_);
    }

    public override Object Clone()
    {
        return new AManyMethodsMethods (
            (PMethods)CloneNode (_methods_),
            (PMethod)CloneNode (_method_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAManyMethodsMethods(this);
    }

    public PMethods GetMethods ()
    {
        return _methods_;
    }

    public void SetMethods (PMethods node)
    {
        if(_methods_ != null)
        {
            _methods_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _methods_ = node;
    }
    public PMethod GetMethod ()
    {
        return _method_;
    }

    public void SetMethod (PMethod node)
    {
        if(_method_ != null)
        {
            _method_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _method_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_methods_)
            + ToString (_method_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _methods_ == child )
        {
            _methods_ = null;
            return;
        }
        if ( _method_ == child )
        {
            _method_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _methods_ == oldChild )
        {
            SetMethods ((PMethods) newChild);
            return;
        }
        if ( _method_ == oldChild )
        {
            SetMethod ((PMethod) newChild);
            return;
        }
    }

}
public sealed class ALastMethodMethods : PMethods
{
    private PMethod _method_;

    public ALastMethodMethods ()
    {
    }

    public ALastMethodMethods (
            PMethod _method_
    )
    {
        SetMethod (_method_);
    }

    public override Object Clone()
    {
        return new ALastMethodMethods (
            (PMethod)CloneNode (_method_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALastMethodMethods(this);
    }

    public PMethod GetMethod ()
    {
        return _method_;
    }

    public void SetMethod (PMethod node)
    {
        if(_method_ != null)
        {
            _method_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _method_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_method_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _method_ == child )
        {
            _method_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _method_ == oldChild )
        {
            SetMethod ((PMethod) newChild);
            return;
        }
    }

}
public sealed class AMethod : PMethod
{
    private TFunction _function_;
    private TId _method_name_;
    private TOpenparenth _openparenth_;
    private PFormalParameters _formal_parameters_;
    private TClosedparenth _closedparenth_;
    private TOpencurl _opencurl_;
    private PStatements _statements_;
    private TClosecurl _closecurl_;
    private TSemicolon _semicolon_;

    public AMethod ()
    {
    }

    public AMethod (
            TFunction _function_,
            TId _method_name_,
            TOpenparenth _openparenth_,
            PFormalParameters _formal_parameters_,
            TClosedparenth _closedparenth_,
            TOpencurl _opencurl_,
            PStatements _statements_,
            TClosecurl _closecurl_,
            TSemicolon _semicolon_
    )
    {
        SetFunction (_function_);
        SetMethodName (_method_name_);
        SetOpenparenth (_openparenth_);
        SetFormalParameters (_formal_parameters_);
        SetClosedparenth (_closedparenth_);
        SetOpencurl (_opencurl_);
        SetStatements (_statements_);
        SetClosecurl (_closecurl_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AMethod (
            (TFunction)CloneNode (_function_),
            (TId)CloneNode (_method_name_),
            (TOpenparenth)CloneNode (_openparenth_),
            (PFormalParameters)CloneNode (_formal_parameters_),
            (TClosedparenth)CloneNode (_closedparenth_),
            (TOpencurl)CloneNode (_opencurl_),
            (PStatements)CloneNode (_statements_),
            (TClosecurl)CloneNode (_closecurl_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMethod(this);
    }

    public TFunction GetFunction ()
    {
        return _function_;
    }

    public void SetFunction (TFunction node)
    {
        if(_function_ != null)
        {
            _function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_ = node;
    }
    public TId GetMethodName ()
    {
        return _method_name_;
    }

    public void SetMethodName (TId node)
    {
        if(_method_name_ != null)
        {
            _method_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _method_name_ = node;
    }
    public TOpenparenth GetOpenparenth ()
    {
        return _openparenth_;
    }

    public void SetOpenparenth (TOpenparenth node)
    {
        if(_openparenth_ != null)
        {
            _openparenth_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openparenth_ = node;
    }
    public PFormalParameters GetFormalParameters ()
    {
        return _formal_parameters_;
    }

    public void SetFormalParameters (PFormalParameters node)
    {
        if(_formal_parameters_ != null)
        {
            _formal_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_parameters_ = node;
    }
    public TClosedparenth GetClosedparenth ()
    {
        return _closedparenth_;
    }

    public void SetClosedparenth (TClosedparenth node)
    {
        if(_closedparenth_ != null)
        {
            _closedparenth_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closedparenth_ = node;
    }
    public TOpencurl GetOpencurl ()
    {
        return _opencurl_;
    }

    public void SetOpencurl (TOpencurl node)
    {
        if(_opencurl_ != null)
        {
            _opencurl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _opencurl_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TClosecurl GetClosecurl ()
    {
        return _closecurl_;
    }

    public void SetClosecurl (TClosecurl node)
    {
        if(_closecurl_ != null)
        {
            _closecurl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closecurl_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_)
            + ToString (_method_name_)
            + ToString (_openparenth_)
            + ToString (_formal_parameters_)
            + ToString (_closedparenth_)
            + ToString (_opencurl_)
            + ToString (_statements_)
            + ToString (_closecurl_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_ == child )
        {
            _function_ = null;
            return;
        }
        if ( _method_name_ == child )
        {
            _method_name_ = null;
            return;
        }
        if ( _openparenth_ == child )
        {
            _openparenth_ = null;
            return;
        }
        if ( _formal_parameters_ == child )
        {
            _formal_parameters_ = null;
            return;
        }
        if ( _closedparenth_ == child )
        {
            _closedparenth_ = null;
            return;
        }
        if ( _opencurl_ == child )
        {
            _opencurl_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _closecurl_ == child )
        {
            _closecurl_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_ == oldChild )
        {
            SetFunction ((TFunction) newChild);
            return;
        }
        if ( _method_name_ == oldChild )
        {
            SetMethodName ((TId) newChild);
            return;
        }
        if ( _openparenth_ == oldChild )
        {
            SetOpenparenth ((TOpenparenth) newChild);
            return;
        }
        if ( _formal_parameters_ == oldChild )
        {
            SetFormalParameters ((PFormalParameters) newChild);
            return;
        }
        if ( _closedparenth_ == oldChild )
        {
            SetClosedparenth ((TClosedparenth) newChild);
            return;
        }
        if ( _opencurl_ == oldChild )
        {
            SetOpencurl ((TOpencurl) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _closecurl_ == oldChild )
        {
            SetClosecurl ((TClosecurl) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AMethodCall : PMethodCall
{
    private TId _method_name_;
    private TOpenparenth _openparenth_;
    private PActualParameters _actual_parameters_;
    private TClosedparenth _closedparenth_;
    private TSemicolon _semicolon_;

    public AMethodCall ()
    {
    }

    public AMethodCall (
            TId _method_name_,
            TOpenparenth _openparenth_,
            PActualParameters _actual_parameters_,
            TClosedparenth _closedparenth_,
            TSemicolon _semicolon_
    )
    {
        SetMethodName (_method_name_);
        SetOpenparenth (_openparenth_);
        SetActualParameters (_actual_parameters_);
        SetClosedparenth (_closedparenth_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AMethodCall (
            (TId)CloneNode (_method_name_),
            (TOpenparenth)CloneNode (_openparenth_),
            (PActualParameters)CloneNode (_actual_parameters_),
            (TClosedparenth)CloneNode (_closedparenth_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMethodCall(this);
    }

    public TId GetMethodName ()
    {
        return _method_name_;
    }

    public void SetMethodName (TId node)
    {
        if(_method_name_ != null)
        {
            _method_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _method_name_ = node;
    }
    public TOpenparenth GetOpenparenth ()
    {
        return _openparenth_;
    }

    public void SetOpenparenth (TOpenparenth node)
    {
        if(_openparenth_ != null)
        {
            _openparenth_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openparenth_ = node;
    }
    public PActualParameters GetActualParameters ()
    {
        return _actual_parameters_;
    }

    public void SetActualParameters (PActualParameters node)
    {
        if(_actual_parameters_ != null)
        {
            _actual_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actual_parameters_ = node;
    }
    public TClosedparenth GetClosedparenth ()
    {
        return _closedparenth_;
    }

    public void SetClosedparenth (TClosedparenth node)
    {
        if(_closedparenth_ != null)
        {
            _closedparenth_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closedparenth_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_method_name_)
            + ToString (_openparenth_)
            + ToString (_actual_parameters_)
            + ToString (_closedparenth_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _method_name_ == child )
        {
            _method_name_ = null;
            return;
        }
        if ( _openparenth_ == child )
        {
            _openparenth_ = null;
            return;
        }
        if ( _actual_parameters_ == child )
        {
            _actual_parameters_ = null;
            return;
        }
        if ( _closedparenth_ == child )
        {
            _closedparenth_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _method_name_ == oldChild )
        {
            SetMethodName ((TId) newChild);
            return;
        }
        if ( _openparenth_ == oldChild )
        {
            SetOpenparenth ((TOpenparenth) newChild);
            return;
        }
        if ( _actual_parameters_ == oldChild )
        {
            SetActualParameters ((PActualParameters) newChild);
            return;
        }
        if ( _closedparenth_ == oldChild )
        {
            SetClosedparenth ((TClosedparenth) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AStringParamActualParameters : PActualParameters
{
    private PActualParameters _actual_parameters_;
    private TComma _comma_;
    private TString _string_;

    public AStringParamActualParameters ()
    {
    }

    public AStringParamActualParameters (
            PActualParameters _actual_parameters_,
            TComma _comma_,
            TString _string_
    )
    {
        SetActualParameters (_actual_parameters_);
        SetComma (_comma_);
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringParamActualParameters (
            (PActualParameters)CloneNode (_actual_parameters_),
            (TComma)CloneNode (_comma_),
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringParamActualParameters(this);
    }

    public PActualParameters GetActualParameters ()
    {
        return _actual_parameters_;
    }

    public void SetActualParameters (PActualParameters node)
    {
        if(_actual_parameters_ != null)
        {
            _actual_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actual_parameters_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_actual_parameters_)
            + ToString (_comma_)
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _actual_parameters_ == child )
        {
            _actual_parameters_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _actual_parameters_ == oldChild )
        {
            SetActualParameters ((PActualParameters) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class AIntParametersActualParameters : PActualParameters
{
    private PActualParameters _actual_parameters_;
    private TComma _comma_;
    private TIntlit _intlit_;

    public AIntParametersActualParameters ()
    {
    }

    public AIntParametersActualParameters (
            PActualParameters _actual_parameters_,
            TComma _comma_,
            TIntlit _intlit_
    )
    {
        SetActualParameters (_actual_parameters_);
        SetComma (_comma_);
        SetIntlit (_intlit_);
    }

    public override Object Clone()
    {
        return new AIntParametersActualParameters (
            (PActualParameters)CloneNode (_actual_parameters_),
            (TComma)CloneNode (_comma_),
            (TIntlit)CloneNode (_intlit_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntParametersActualParameters(this);
    }

    public PActualParameters GetActualParameters ()
    {
        return _actual_parameters_;
    }

    public void SetActualParameters (PActualParameters node)
    {
        if(_actual_parameters_ != null)
        {
            _actual_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actual_parameters_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public TIntlit GetIntlit ()
    {
        return _intlit_;
    }

    public void SetIntlit (TIntlit node)
    {
        if(_intlit_ != null)
        {
            _intlit_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _intlit_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_actual_parameters_)
            + ToString (_comma_)
            + ToString (_intlit_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _actual_parameters_ == child )
        {
            _actual_parameters_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _intlit_ == child )
        {
            _intlit_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _actual_parameters_ == oldChild )
        {
            SetActualParameters ((PActualParameters) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _intlit_ == oldChild )
        {
            SetIntlit ((TIntlit) newChild);
            return;
        }
    }

}
public sealed class AFloatParametersActualParameters : PActualParameters
{
    private PActualParameters _actual_parameters_;
    private TComma _comma_;
    private TFloatlit _floatlit_;

    public AFloatParametersActualParameters ()
    {
    }

    public AFloatParametersActualParameters (
            PActualParameters _actual_parameters_,
            TComma _comma_,
            TFloatlit _floatlit_
    )
    {
        SetActualParameters (_actual_parameters_);
        SetComma (_comma_);
        SetFloatlit (_floatlit_);
    }

    public override Object Clone()
    {
        return new AFloatParametersActualParameters (
            (PActualParameters)CloneNode (_actual_parameters_),
            (TComma)CloneNode (_comma_),
            (TFloatlit)CloneNode (_floatlit_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatParametersActualParameters(this);
    }

    public PActualParameters GetActualParameters ()
    {
        return _actual_parameters_;
    }

    public void SetActualParameters (PActualParameters node)
    {
        if(_actual_parameters_ != null)
        {
            _actual_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actual_parameters_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public TFloatlit GetFloatlit ()
    {
        return _floatlit_;
    }

    public void SetFloatlit (TFloatlit node)
    {
        if(_floatlit_ != null)
        {
            _floatlit_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _floatlit_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_actual_parameters_)
            + ToString (_comma_)
            + ToString (_floatlit_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _actual_parameters_ == child )
        {
            _actual_parameters_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _floatlit_ == child )
        {
            _floatlit_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _actual_parameters_ == oldChild )
        {
            SetActualParameters ((PActualParameters) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _floatlit_ == oldChild )
        {
            SetFloatlit ((TFloatlit) newChild);
            return;
        }
    }

}
public sealed class AVarParametersActualParameters : PActualParameters
{
    private PActualParameters _actual_parameters_;
    private TComma _comma_;
    private TId _id_;

    public AVarParametersActualParameters ()
    {
    }

    public AVarParametersActualParameters (
            PActualParameters _actual_parameters_,
            TComma _comma_,
            TId _id_
    )
    {
        SetActualParameters (_actual_parameters_);
        SetComma (_comma_);
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AVarParametersActualParameters (
            (PActualParameters)CloneNode (_actual_parameters_),
            (TComma)CloneNode (_comma_),
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVarParametersActualParameters(this);
    }

    public PActualParameters GetActualParameters ()
    {
        return _actual_parameters_;
    }

    public void SetActualParameters (PActualParameters node)
    {
        if(_actual_parameters_ != null)
        {
            _actual_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actual_parameters_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_actual_parameters_)
            + ToString (_comma_)
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _actual_parameters_ == child )
        {
            _actual_parameters_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _actual_parameters_ == oldChild )
        {
            SetActualParameters ((PActualParameters) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AStringActualParameters : PActualParameters
{
    private TString _string_;

    public AStringActualParameters ()
    {
    }

    public AStringActualParameters (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringActualParameters (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringActualParameters(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class AVariableActualParameters : PActualParameters
{
    private TId _id_;

    public AVariableActualParameters ()
    {
    }

    public AVariableActualParameters (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AVariableActualParameters (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableActualParameters(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AIntActualParameters : PActualParameters
{
    private TIntlit _intlit_;

    public AIntActualParameters ()
    {
    }

    public AIntActualParameters (
            TIntlit _intlit_
    )
    {
        SetIntlit (_intlit_);
    }

    public override Object Clone()
    {
        return new AIntActualParameters (
            (TIntlit)CloneNode (_intlit_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntActualParameters(this);
    }

    public TIntlit GetIntlit ()
    {
        return _intlit_;
    }

    public void SetIntlit (TIntlit node)
    {
        if(_intlit_ != null)
        {
            _intlit_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _intlit_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_intlit_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _intlit_ == child )
        {
            _intlit_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _intlit_ == oldChild )
        {
            SetIntlit ((TIntlit) newChild);
            return;
        }
    }

}
public sealed class AFloatActualParameters : PActualParameters
{
    private TFloatlit _floatlit_;

    public AFloatActualParameters ()
    {
    }

    public AFloatActualParameters (
            TFloatlit _floatlit_
    )
    {
        SetFloatlit (_floatlit_);
    }

    public override Object Clone()
    {
        return new AFloatActualParameters (
            (TFloatlit)CloneNode (_floatlit_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatActualParameters(this);
    }

    public TFloatlit GetFloatlit ()
    {
        return _floatlit_;
    }

    public void SetFloatlit (TFloatlit node)
    {
        if(_floatlit_ != null)
        {
            _floatlit_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _floatlit_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_floatlit_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _floatlit_ == child )
        {
            _floatlit_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _floatlit_ == oldChild )
        {
            SetFloatlit ((TFloatlit) newChild);
            return;
        }
    }

}
public sealed class ANothingActualParameters : PActualParameters
{


    public ANothingActualParameters (
    )
    {
    }

    public override Object Clone()
    {
        return new ANothingActualParameters (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANothingActualParameters(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AManyParametersFormalParameters : PFormalParameters
{
    private TId _var_type_;
    private TId _var_name_;
    private TComma _comma_;
    private PFormalParameters _formal_parameters_;

    public AManyParametersFormalParameters ()
    {
    }

    public AManyParametersFormalParameters (
            TId _var_type_,
            TId _var_name_,
            TComma _comma_,
            PFormalParameters _formal_parameters_
    )
    {
        SetVarType (_var_type_);
        SetVarName (_var_name_);
        SetComma (_comma_);
        SetFormalParameters (_formal_parameters_);
    }

    public override Object Clone()
    {
        return new AManyParametersFormalParameters (
            (TId)CloneNode (_var_type_),
            (TId)CloneNode (_var_name_),
            (TComma)CloneNode (_comma_),
            (PFormalParameters)CloneNode (_formal_parameters_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAManyParametersFormalParameters(this);
    }

    public TId GetVarType ()
    {
        return _var_type_;
    }

    public void SetVarType (TId node)
    {
        if(_var_type_ != null)
        {
            _var_type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_type_ = node;
    }
    public TId GetVarName ()
    {
        return _var_name_;
    }

    public void SetVarName (TId node)
    {
        if(_var_name_ != null)
        {
            _var_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_name_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PFormalParameters GetFormalParameters ()
    {
        return _formal_parameters_;
    }

    public void SetFormalParameters (PFormalParameters node)
    {
        if(_formal_parameters_ != null)
        {
            _formal_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_parameters_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_type_)
            + ToString (_var_name_)
            + ToString (_comma_)
            + ToString (_formal_parameters_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_type_ == child )
        {
            _var_type_ = null;
            return;
        }
        if ( _var_name_ == child )
        {
            _var_name_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _formal_parameters_ == child )
        {
            _formal_parameters_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_type_ == oldChild )
        {
            SetVarType ((TId) newChild);
            return;
        }
        if ( _var_name_ == oldChild )
        {
            SetVarName ((TId) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _formal_parameters_ == oldChild )
        {
            SetFormalParameters ((PFormalParameters) newChild);
            return;
        }
    }

}
public sealed class AFinalParameterFormalParameters : PFormalParameters
{
    private TId _var_type_;
    private TId _var_name_;

    public AFinalParameterFormalParameters ()
    {
    }

    public AFinalParameterFormalParameters (
            TId _var_type_,
            TId _var_name_
    )
    {
        SetVarType (_var_type_);
        SetVarName (_var_name_);
    }

    public override Object Clone()
    {
        return new AFinalParameterFormalParameters (
            (TId)CloneNode (_var_type_),
            (TId)CloneNode (_var_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFinalParameterFormalParameters(this);
    }

    public TId GetVarType ()
    {
        return _var_type_;
    }

    public void SetVarType (TId node)
    {
        if(_var_type_ != null)
        {
            _var_type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_type_ = node;
    }
    public TId GetVarName ()
    {
        return _var_name_;
    }

    public void SetVarName (TId node)
    {
        if(_var_name_ != null)
        {
            _var_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_type_)
            + ToString (_var_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_type_ == child )
        {
            _var_type_ = null;
            return;
        }
        if ( _var_name_ == child )
        {
            _var_name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_type_ == oldChild )
        {
            SetVarType ((TId) newChild);
            return;
        }
        if ( _var_name_ == oldChild )
        {
            SetVarName ((TId) newChild);
            return;
        }
    }

}
public sealed class AManyStatementsStatements : PStatements
{
    private PStatements _statements_;
    private PStatement _statement_;

    public AManyStatementsStatements ()
    {
    }

    public AManyStatementsStatements (
            PStatements _statements_,
            PStatement _statement_
    )
    {
        SetStatements (_statements_);
        SetStatement (_statement_);
    }

    public override Object Clone()
    {
        return new AManyStatementsStatements (
            (PStatements)CloneNode (_statements_),
            (PStatement)CloneNode (_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAManyStatementsStatements(this);
    }

    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statements_)
            + ToString (_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
    }

}
public sealed class AOneStatementStatements : PStatements
{
    private PStatement _statement_;

    public AOneStatementStatements ()
    {
    }

    public AOneStatementStatements (
            PStatement _statement_
    )
    {
        SetStatement (_statement_);
    }

    public override Object Clone()
    {
        return new AOneStatementStatements (
            (PStatement)CloneNode (_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneStatementStatements(this);
    }

    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
    }

}
public sealed class AAssignmentStatement : PStatement
{
    private PAssignment _assignment_;

    public AAssignmentStatement ()
    {
    }

    public AAssignmentStatement (
            PAssignment _assignment_
    )
    {
        SetAssignment (_assignment_);
    }

    public override Object Clone()
    {
        return new AAssignmentStatement (
            (PAssignment)CloneNode (_assignment_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignmentStatement(this);
    }

    public PAssignment GetAssignment ()
    {
        return _assignment_;
    }

    public void SetAssignment (PAssignment node)
    {
        if(_assignment_ != null)
        {
            _assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assignment_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assignment_ == child )
        {
            _assignment_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assignment_ == oldChild )
        {
            SetAssignment ((PAssignment) newChild);
            return;
        }
    }

}
public sealed class ANumDeclareStatement : PStatement
{
    private PNumDeclare _num_declare_;

    public ANumDeclareStatement ()
    {
    }

    public ANumDeclareStatement (
            PNumDeclare _num_declare_
    )
    {
        SetNumDeclare (_num_declare_);
    }

    public override Object Clone()
    {
        return new ANumDeclareStatement (
            (PNumDeclare)CloneNode (_num_declare_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANumDeclareStatement(this);
    }

    public PNumDeclare GetNumDeclare ()
    {
        return _num_declare_;
    }

    public void SetNumDeclare (PNumDeclare node)
    {
        if(_num_declare_ != null)
        {
            _num_declare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _num_declare_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_num_declare_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _num_declare_ == child )
        {
            _num_declare_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _num_declare_ == oldChild )
        {
            SetNumDeclare ((PNumDeclare) newChild);
            return;
        }
    }

}
public sealed class AMethodCallStatement : PStatement
{
    private PMethodCall _method_call_;

    public AMethodCallStatement ()
    {
    }

    public AMethodCallStatement (
            PMethodCall _method_call_
    )
    {
        SetMethodCall (_method_call_);
    }

    public override Object Clone()
    {
        return new AMethodCallStatement (
            (PMethodCall)CloneNode (_method_call_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMethodCallStatement(this);
    }

    public PMethodCall GetMethodCall ()
    {
        return _method_call_;
    }

    public void SetMethodCall (PMethodCall node)
    {
        if(_method_call_ != null)
        {
            _method_call_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _method_call_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_method_call_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _method_call_ == child )
        {
            _method_call_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _method_call_ == oldChild )
        {
            SetMethodCall ((PMethodCall) newChild);
            return;
        }
    }

}
public sealed class AIfStatement : PStatement
{
    private PIf _if_;

    public AIfStatement ()
    {
    }

    public AIfStatement (
            PIf _if_
    )
    {
        SetIf (_if_);
    }

    public override Object Clone()
    {
        return new AIfStatement (
            (PIf)CloneNode (_if_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfStatement(this);
    }

    public PIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (PIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((PIf) newChild);
            return;
        }
    }

}
public sealed class AWhileStatement : PStatement
{
    private PWhile _while_;

    public AWhileStatement ()
    {
    }

    public AWhileStatement (
            PWhile _while_
    )
    {
        SetWhile (_while_);
    }

    public override Object Clone()
    {
        return new AWhileStatement (
            (PWhile)CloneNode (_while_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileStatement(this);
    }

    public PWhile GetWhile ()
    {
        return _while_;
    }

    public void SetWhile (PWhile node)
    {
        if(_while_ != null)
        {
            _while_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_ == child )
        {
            _while_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_ == oldChild )
        {
            SetWhile ((PWhile) newChild);
            return;
        }
    }

}
public sealed class AAssignIntAssignment : PAssignment
{
    private TId _int_name_;
    private TEqual _equal_;
    private PExpressions _expressions_;
    private TSemicolon _semicolon_;

    public AAssignIntAssignment ()
    {
    }

    public AAssignIntAssignment (
            TId _int_name_,
            TEqual _equal_,
            PExpressions _expressions_,
            TSemicolon _semicolon_
    )
    {
        SetIntName (_int_name_);
        SetEqual (_equal_);
        SetExpressions (_expressions_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AAssignIntAssignment (
            (TId)CloneNode (_int_name_),
            (TEqual)CloneNode (_equal_),
            (PExpressions)CloneNode (_expressions_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignIntAssignment(this);
    }

    public TId GetIntName ()
    {
        return _int_name_;
    }

    public void SetIntName (TId node)
    {
        if(_int_name_ != null)
        {
            _int_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _int_name_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public PExpressions GetExpressions ()
    {
        return _expressions_;
    }

    public void SetExpressions (PExpressions node)
    {
        if(_expressions_ != null)
        {
            _expressions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expressions_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_int_name_)
            + ToString (_equal_)
            + ToString (_expressions_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _int_name_ == child )
        {
            _int_name_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _expressions_ == child )
        {
            _expressions_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _int_name_ == oldChild )
        {
            SetIntName ((TId) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _expressions_ == oldChild )
        {
            SetExpressions ((PExpressions) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AVarDeclareAssignment : PAssignment
{
    private TId _var_type_;
    private TId _var_name_;
    private TSemicolon _semicolon_;

    public AVarDeclareAssignment ()
    {
    }

    public AVarDeclareAssignment (
            TId _var_type_,
            TId _var_name_,
            TSemicolon _semicolon_
    )
    {
        SetVarType (_var_type_);
        SetVarName (_var_name_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AVarDeclareAssignment (
            (TId)CloneNode (_var_type_),
            (TId)CloneNode (_var_name_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVarDeclareAssignment(this);
    }

    public TId GetVarType ()
    {
        return _var_type_;
    }

    public void SetVarType (TId node)
    {
        if(_var_type_ != null)
        {
            _var_type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_type_ = node;
    }
    public TId GetVarName ()
    {
        return _var_name_;
    }

    public void SetVarName (TId node)
    {
        if(_var_name_ != null)
        {
            _var_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_name_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_type_)
            + ToString (_var_name_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_type_ == child )
        {
            _var_type_ = null;
            return;
        }
        if ( _var_name_ == child )
        {
            _var_name_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_type_ == oldChild )
        {
            SetVarType ((TId) newChild);
            return;
        }
        if ( _var_name_ == oldChild )
        {
            SetVarName ((TId) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AArrayAssignMathIndexAssignment : PAssignment
{
    private TId _var_name_;
    private TOpenbracket _start_ob_;
    private TClosedbracket _start_cb_;
    private TEqual _equal_;
    private TOpenbracket _end_ob_;
    private PActualParameters _actual_parameters_;
    private TClosedbracket _end_cb_;
    private TSemicolon _semicolon_;

    public AArrayAssignMathIndexAssignment ()
    {
    }

    public AArrayAssignMathIndexAssignment (
            TId _var_name_,
            TOpenbracket _start_ob_,
            TClosedbracket _start_cb_,
            TEqual _equal_,
            TOpenbracket _end_ob_,
            PActualParameters _actual_parameters_,
            TClosedbracket _end_cb_,
            TSemicolon _semicolon_
    )
    {
        SetVarName (_var_name_);
        SetStartOb (_start_ob_);
        SetStartCb (_start_cb_);
        SetEqual (_equal_);
        SetEndOb (_end_ob_);
        SetActualParameters (_actual_parameters_);
        SetEndCb (_end_cb_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AArrayAssignMathIndexAssignment (
            (TId)CloneNode (_var_name_),
            (TOpenbracket)CloneNode (_start_ob_),
            (TClosedbracket)CloneNode (_start_cb_),
            (TEqual)CloneNode (_equal_),
            (TOpenbracket)CloneNode (_end_ob_),
            (PActualParameters)CloneNode (_actual_parameters_),
            (TClosedbracket)CloneNode (_end_cb_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayAssignMathIndexAssignment(this);
    }

    public TId GetVarName ()
    {
        return _var_name_;
    }

    public void SetVarName (TId node)
    {
        if(_var_name_ != null)
        {
            _var_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_name_ = node;
    }
    public TOpenbracket GetStartOb ()
    {
        return _start_ob_;
    }

    public void SetStartOb (TOpenbracket node)
    {
        if(_start_ob_ != null)
        {
            _start_ob_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _start_ob_ = node;
    }
    public TClosedbracket GetStartCb ()
    {
        return _start_cb_;
    }

    public void SetStartCb (TClosedbracket node)
    {
        if(_start_cb_ != null)
        {
            _start_cb_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _start_cb_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public TOpenbracket GetEndOb ()
    {
        return _end_ob_;
    }

    public void SetEndOb (TOpenbracket node)
    {
        if(_end_ob_ != null)
        {
            _end_ob_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_ob_ = node;
    }
    public PActualParameters GetActualParameters ()
    {
        return _actual_parameters_;
    }

    public void SetActualParameters (PActualParameters node)
    {
        if(_actual_parameters_ != null)
        {
            _actual_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actual_parameters_ = node;
    }
    public TClosedbracket GetEndCb ()
    {
        return _end_cb_;
    }

    public void SetEndCb (TClosedbracket node)
    {
        if(_end_cb_ != null)
        {
            _end_cb_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_cb_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_name_)
            + ToString (_start_ob_)
            + ToString (_start_cb_)
            + ToString (_equal_)
            + ToString (_end_ob_)
            + ToString (_actual_parameters_)
            + ToString (_end_cb_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_name_ == child )
        {
            _var_name_ = null;
            return;
        }
        if ( _start_ob_ == child )
        {
            _start_ob_ = null;
            return;
        }
        if ( _start_cb_ == child )
        {
            _start_cb_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _end_ob_ == child )
        {
            _end_ob_ = null;
            return;
        }
        if ( _actual_parameters_ == child )
        {
            _actual_parameters_ = null;
            return;
        }
        if ( _end_cb_ == child )
        {
            _end_cb_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_name_ == oldChild )
        {
            SetVarName ((TId) newChild);
            return;
        }
        if ( _start_ob_ == oldChild )
        {
            SetStartOb ((TOpenbracket) newChild);
            return;
        }
        if ( _start_cb_ == oldChild )
        {
            SetStartCb ((TClosedbracket) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _end_ob_ == oldChild )
        {
            SetEndOb ((TOpenbracket) newChild);
            return;
        }
        if ( _actual_parameters_ == oldChild )
        {
            SetActualParameters ((PActualParameters) newChild);
            return;
        }
        if ( _end_cb_ == oldChild )
        {
            SetEndCb ((TClosedbracket) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AArrayAssignAssignment : PAssignment
{
    private TId _var_name_;
    private TOpenbracket _start_ob_;
    private PExpressions _internal_math_;
    private TClosedbracket _start_cb_;
    private TEqual _equal_;
    private PExpressions _external_math_;
    private TSemicolon _semicolon_;

    public AArrayAssignAssignment ()
    {
    }

    public AArrayAssignAssignment (
            TId _var_name_,
            TOpenbracket _start_ob_,
            PExpressions _internal_math_,
            TClosedbracket _start_cb_,
            TEqual _equal_,
            PExpressions _external_math_,
            TSemicolon _semicolon_
    )
    {
        SetVarName (_var_name_);
        SetStartOb (_start_ob_);
        SetInternalMath (_internal_math_);
        SetStartCb (_start_cb_);
        SetEqual (_equal_);
        SetExternalMath (_external_math_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AArrayAssignAssignment (
            (TId)CloneNode (_var_name_),
            (TOpenbracket)CloneNode (_start_ob_),
            (PExpressions)CloneNode (_internal_math_),
            (TClosedbracket)CloneNode (_start_cb_),
            (TEqual)CloneNode (_equal_),
            (PExpressions)CloneNode (_external_math_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayAssignAssignment(this);
    }

    public TId GetVarName ()
    {
        return _var_name_;
    }

    public void SetVarName (TId node)
    {
        if(_var_name_ != null)
        {
            _var_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_name_ = node;
    }
    public TOpenbracket GetStartOb ()
    {
        return _start_ob_;
    }

    public void SetStartOb (TOpenbracket node)
    {
        if(_start_ob_ != null)
        {
            _start_ob_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _start_ob_ = node;
    }
    public PExpressions GetInternalMath ()
    {
        return _internal_math_;
    }

    public void SetInternalMath (PExpressions node)
    {
        if(_internal_math_ != null)
        {
            _internal_math_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _internal_math_ = node;
    }
    public TClosedbracket GetStartCb ()
    {
        return _start_cb_;
    }

    public void SetStartCb (TClosedbracket node)
    {
        if(_start_cb_ != null)
        {
            _start_cb_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _start_cb_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public PExpressions GetExternalMath ()
    {
        return _external_math_;
    }

    public void SetExternalMath (PExpressions node)
    {
        if(_external_math_ != null)
        {
            _external_math_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _external_math_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_name_)
            + ToString (_start_ob_)
            + ToString (_internal_math_)
            + ToString (_start_cb_)
            + ToString (_equal_)
            + ToString (_external_math_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_name_ == child )
        {
            _var_name_ = null;
            return;
        }
        if ( _start_ob_ == child )
        {
            _start_ob_ = null;
            return;
        }
        if ( _internal_math_ == child )
        {
            _internal_math_ = null;
            return;
        }
        if ( _start_cb_ == child )
        {
            _start_cb_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _external_math_ == child )
        {
            _external_math_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_name_ == oldChild )
        {
            SetVarName ((TId) newChild);
            return;
        }
        if ( _start_ob_ == oldChild )
        {
            SetStartOb ((TOpenbracket) newChild);
            return;
        }
        if ( _internal_math_ == oldChild )
        {
            SetInternalMath ((PExpressions) newChild);
            return;
        }
        if ( _start_cb_ == oldChild )
        {
            SetStartCb ((TClosedbracket) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _external_math_ == oldChild )
        {
            SetExternalMath ((PExpressions) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AIntdeclNumDeclare : PNumDeclare
{
    private TId _var_type_;
    private TId _var_name_;
    private TEqual _equal_;
    private TIntlit _intlit_;
    private TSemicolon _semicolon_;

    public AIntdeclNumDeclare ()
    {
    }

    public AIntdeclNumDeclare (
            TId _var_type_,
            TId _var_name_,
            TEqual _equal_,
            TIntlit _intlit_,
            TSemicolon _semicolon_
    )
    {
        SetVarType (_var_type_);
        SetVarName (_var_name_);
        SetEqual (_equal_);
        SetIntlit (_intlit_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AIntdeclNumDeclare (
            (TId)CloneNode (_var_type_),
            (TId)CloneNode (_var_name_),
            (TEqual)CloneNode (_equal_),
            (TIntlit)CloneNode (_intlit_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntdeclNumDeclare(this);
    }

    public TId GetVarType ()
    {
        return _var_type_;
    }

    public void SetVarType (TId node)
    {
        if(_var_type_ != null)
        {
            _var_type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_type_ = node;
    }
    public TId GetVarName ()
    {
        return _var_name_;
    }

    public void SetVarName (TId node)
    {
        if(_var_name_ != null)
        {
            _var_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_name_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public TIntlit GetIntlit ()
    {
        return _intlit_;
    }

    public void SetIntlit (TIntlit node)
    {
        if(_intlit_ != null)
        {
            _intlit_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _intlit_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_type_)
            + ToString (_var_name_)
            + ToString (_equal_)
            + ToString (_intlit_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_type_ == child )
        {
            _var_type_ = null;
            return;
        }
        if ( _var_name_ == child )
        {
            _var_name_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _intlit_ == child )
        {
            _intlit_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_type_ == oldChild )
        {
            SetVarType ((TId) newChild);
            return;
        }
        if ( _var_name_ == oldChild )
        {
            SetVarName ((TId) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _intlit_ == oldChild )
        {
            SetIntlit ((TIntlit) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AFloatdeclNumDeclare : PNumDeclare
{
    private TId _var_type_;
    private TId _var_name_;
    private TEqual _equal_;
    private TFloatlit _floatlit_;
    private TSemicolon _semicolon_;

    public AFloatdeclNumDeclare ()
    {
    }

    public AFloatdeclNumDeclare (
            TId _var_type_,
            TId _var_name_,
            TEqual _equal_,
            TFloatlit _floatlit_,
            TSemicolon _semicolon_
    )
    {
        SetVarType (_var_type_);
        SetVarName (_var_name_);
        SetEqual (_equal_);
        SetFloatlit (_floatlit_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AFloatdeclNumDeclare (
            (TId)CloneNode (_var_type_),
            (TId)CloneNode (_var_name_),
            (TEqual)CloneNode (_equal_),
            (TFloatlit)CloneNode (_floatlit_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatdeclNumDeclare(this);
    }

    public TId GetVarType ()
    {
        return _var_type_;
    }

    public void SetVarType (TId node)
    {
        if(_var_type_ != null)
        {
            _var_type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_type_ = node;
    }
    public TId GetVarName ()
    {
        return _var_name_;
    }

    public void SetVarName (TId node)
    {
        if(_var_name_ != null)
        {
            _var_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_name_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public TFloatlit GetFloatlit ()
    {
        return _floatlit_;
    }

    public void SetFloatlit (TFloatlit node)
    {
        if(_floatlit_ != null)
        {
            _floatlit_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _floatlit_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_type_)
            + ToString (_var_name_)
            + ToString (_equal_)
            + ToString (_floatlit_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_type_ == child )
        {
            _var_type_ = null;
            return;
        }
        if ( _var_name_ == child )
        {
            _var_name_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _floatlit_ == child )
        {
            _floatlit_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_type_ == oldChild )
        {
            SetVarType ((TId) newChild);
            return;
        }
        if ( _var_name_ == oldChild )
        {
            SetVarName ((TId) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _floatlit_ == oldChild )
        {
            SetFloatlit ((TFloatlit) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AArrayIndexNumDeclare : PNumDeclare
{
    private TId _var_type_;
    private TId _var_name_;
    private TOpenbracket _openbracket_;
    private TIntlit _intlit_;
    private TClosedbracket _closedbracket_;
    private TSemicolon _semicolon_;

    public AArrayIndexNumDeclare ()
    {
    }

    public AArrayIndexNumDeclare (
            TId _var_type_,
            TId _var_name_,
            TOpenbracket _openbracket_,
            TIntlit _intlit_,
            TClosedbracket _closedbracket_,
            TSemicolon _semicolon_
    )
    {
        SetVarType (_var_type_);
        SetVarName (_var_name_);
        SetOpenbracket (_openbracket_);
        SetIntlit (_intlit_);
        SetClosedbracket (_closedbracket_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AArrayIndexNumDeclare (
            (TId)CloneNode (_var_type_),
            (TId)CloneNode (_var_name_),
            (TOpenbracket)CloneNode (_openbracket_),
            (TIntlit)CloneNode (_intlit_),
            (TClosedbracket)CloneNode (_closedbracket_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayIndexNumDeclare(this);
    }

    public TId GetVarType ()
    {
        return _var_type_;
    }

    public void SetVarType (TId node)
    {
        if(_var_type_ != null)
        {
            _var_type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_type_ = node;
    }
    public TId GetVarName ()
    {
        return _var_name_;
    }

    public void SetVarName (TId node)
    {
        if(_var_name_ != null)
        {
            _var_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_name_ = node;
    }
    public TOpenbracket GetOpenbracket ()
    {
        return _openbracket_;
    }

    public void SetOpenbracket (TOpenbracket node)
    {
        if(_openbracket_ != null)
        {
            _openbracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbracket_ = node;
    }
    public TIntlit GetIntlit ()
    {
        return _intlit_;
    }

    public void SetIntlit (TIntlit node)
    {
        if(_intlit_ != null)
        {
            _intlit_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _intlit_ = node;
    }
    public TClosedbracket GetClosedbracket ()
    {
        return _closedbracket_;
    }

    public void SetClosedbracket (TClosedbracket node)
    {
        if(_closedbracket_ != null)
        {
            _closedbracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closedbracket_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_type_)
            + ToString (_var_name_)
            + ToString (_openbracket_)
            + ToString (_intlit_)
            + ToString (_closedbracket_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_type_ == child )
        {
            _var_type_ = null;
            return;
        }
        if ( _var_name_ == child )
        {
            _var_name_ = null;
            return;
        }
        if ( _openbracket_ == child )
        {
            _openbracket_ = null;
            return;
        }
        if ( _intlit_ == child )
        {
            _intlit_ = null;
            return;
        }
        if ( _closedbracket_ == child )
        {
            _closedbracket_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_type_ == oldChild )
        {
            SetVarType ((TId) newChild);
            return;
        }
        if ( _var_name_ == oldChild )
        {
            SetVarName ((TId) newChild);
            return;
        }
        if ( _openbracket_ == oldChild )
        {
            SetOpenbracket ((TOpenbracket) newChild);
            return;
        }
        if ( _intlit_ == oldChild )
        {
            SetIntlit ((TIntlit) newChild);
            return;
        }
        if ( _closedbracket_ == oldChild )
        {
            SetClosedbracket ((TClosedbracket) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AIf : PIf
{
    private TIflit _iflit_;
    private PExpressions _expressions_;
    private TOpencurl _opencurl_;
    private PStatements _statements_;
    private TClosecurl _closecurl_;
    private TSemicolon _semicolon_;
    private PElsepart _elsepart_;

    public AIf ()
    {
    }

    public AIf (
            TIflit _iflit_,
            PExpressions _expressions_,
            TOpencurl _opencurl_,
            PStatements _statements_,
            TClosecurl _closecurl_,
            TSemicolon _semicolon_,
            PElsepart _elsepart_
    )
    {
        SetIflit (_iflit_);
        SetExpressions (_expressions_);
        SetOpencurl (_opencurl_);
        SetStatements (_statements_);
        SetClosecurl (_closecurl_);
        SetSemicolon (_semicolon_);
        SetElsepart (_elsepart_);
    }

    public override Object Clone()
    {
        return new AIf (
            (TIflit)CloneNode (_iflit_),
            (PExpressions)CloneNode (_expressions_),
            (TOpencurl)CloneNode (_opencurl_),
            (PStatements)CloneNode (_statements_),
            (TClosecurl)CloneNode (_closecurl_),
            (TSemicolon)CloneNode (_semicolon_),
            (PElsepart)CloneNode (_elsepart_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIf(this);
    }

    public TIflit GetIflit ()
    {
        return _iflit_;
    }

    public void SetIflit (TIflit node)
    {
        if(_iflit_ != null)
        {
            _iflit_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _iflit_ = node;
    }
    public PExpressions GetExpressions ()
    {
        return _expressions_;
    }

    public void SetExpressions (PExpressions node)
    {
        if(_expressions_ != null)
        {
            _expressions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expressions_ = node;
    }
    public TOpencurl GetOpencurl ()
    {
        return _opencurl_;
    }

    public void SetOpencurl (TOpencurl node)
    {
        if(_opencurl_ != null)
        {
            _opencurl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _opencurl_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TClosecurl GetClosecurl ()
    {
        return _closecurl_;
    }

    public void SetClosecurl (TClosecurl node)
    {
        if(_closecurl_ != null)
        {
            _closecurl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closecurl_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }
    public PElsepart GetElsepart ()
    {
        return _elsepart_;
    }

    public void SetElsepart (PElsepart node)
    {
        if(_elsepart_ != null)
        {
            _elsepart_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elsepart_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_iflit_)
            + ToString (_expressions_)
            + ToString (_opencurl_)
            + ToString (_statements_)
            + ToString (_closecurl_)
            + ToString (_semicolon_)
            + ToString (_elsepart_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _iflit_ == child )
        {
            _iflit_ = null;
            return;
        }
        if ( _expressions_ == child )
        {
            _expressions_ = null;
            return;
        }
        if ( _opencurl_ == child )
        {
            _opencurl_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _closecurl_ == child )
        {
            _closecurl_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
        if ( _elsepart_ == child )
        {
            _elsepart_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _iflit_ == oldChild )
        {
            SetIflit ((TIflit) newChild);
            return;
        }
        if ( _expressions_ == oldChild )
        {
            SetExpressions ((PExpressions) newChild);
            return;
        }
        if ( _opencurl_ == oldChild )
        {
            SetOpencurl ((TOpencurl) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _closecurl_ == oldChild )
        {
            SetClosecurl ((TClosecurl) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
        if ( _elsepart_ == oldChild )
        {
            SetElsepart ((PElsepart) newChild);
            return;
        }
    }

}
public sealed class AElseElsepart : PElsepart
{
    private TElse _else_;
    private TOpencurl _opencurl_;
    private PStatements _statements_;
    private TClosecurl _closecurl_;
    private TSemicolon _semicolon_;

    public AElseElsepart ()
    {
    }

    public AElseElsepart (
            TElse _else_,
            TOpencurl _opencurl_,
            PStatements _statements_,
            TClosecurl _closecurl_,
            TSemicolon _semicolon_
    )
    {
        SetElse (_else_);
        SetOpencurl (_opencurl_);
        SetStatements (_statements_);
        SetClosecurl (_closecurl_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AElseElsepart (
            (TElse)CloneNode (_else_),
            (TOpencurl)CloneNode (_opencurl_),
            (PStatements)CloneNode (_statements_),
            (TClosecurl)CloneNode (_closecurl_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAElseElsepart(this);
    }

    public TElse GetElse ()
    {
        return _else_;
    }

    public void SetElse (TElse node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }
    public TOpencurl GetOpencurl ()
    {
        return _opencurl_;
    }

    public void SetOpencurl (TOpencurl node)
    {
        if(_opencurl_ != null)
        {
            _opencurl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _opencurl_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TClosecurl GetClosecurl ()
    {
        return _closecurl_;
    }

    public void SetClosecurl (TClosecurl node)
    {
        if(_closecurl_ != null)
        {
            _closecurl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closecurl_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_else_)
            + ToString (_opencurl_)
            + ToString (_statements_)
            + ToString (_closecurl_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
        if ( _opencurl_ == child )
        {
            _opencurl_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _closecurl_ == child )
        {
            _closecurl_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _else_ == oldChild )
        {
            SetElse ((TElse) newChild);
            return;
        }
        if ( _opencurl_ == oldChild )
        {
            SetOpencurl ((TOpencurl) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _closecurl_ == oldChild )
        {
            SetClosecurl ((TClosecurl) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class ANoElseElsepart : PElsepart
{


    public ANoElseElsepart (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoElseElsepart (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoElseElsepart(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AWhile : PWhile
{
    private TWhilelit _whilelit_;
    private PExpressions _expressions_;
    private TOpencurl _opencurl_;
    private PStatements _statements_;
    private TClosecurl _closecurl_;
    private TSemicolon _semicolon_;

    public AWhile ()
    {
    }

    public AWhile (
            TWhilelit _whilelit_,
            PExpressions _expressions_,
            TOpencurl _opencurl_,
            PStatements _statements_,
            TClosecurl _closecurl_,
            TSemicolon _semicolon_
    )
    {
        SetWhilelit (_whilelit_);
        SetExpressions (_expressions_);
        SetOpencurl (_opencurl_);
        SetStatements (_statements_);
        SetClosecurl (_closecurl_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AWhile (
            (TWhilelit)CloneNode (_whilelit_),
            (PExpressions)CloneNode (_expressions_),
            (TOpencurl)CloneNode (_opencurl_),
            (PStatements)CloneNode (_statements_),
            (TClosecurl)CloneNode (_closecurl_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhile(this);
    }

    public TWhilelit GetWhilelit ()
    {
        return _whilelit_;
    }

    public void SetWhilelit (TWhilelit node)
    {
        if(_whilelit_ != null)
        {
            _whilelit_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _whilelit_ = node;
    }
    public PExpressions GetExpressions ()
    {
        return _expressions_;
    }

    public void SetExpressions (PExpressions node)
    {
        if(_expressions_ != null)
        {
            _expressions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expressions_ = node;
    }
    public TOpencurl GetOpencurl ()
    {
        return _opencurl_;
    }

    public void SetOpencurl (TOpencurl node)
    {
        if(_opencurl_ != null)
        {
            _opencurl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _opencurl_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TClosecurl GetClosecurl ()
    {
        return _closecurl_;
    }

    public void SetClosecurl (TClosecurl node)
    {
        if(_closecurl_ != null)
        {
            _closecurl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closecurl_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_whilelit_)
            + ToString (_expressions_)
            + ToString (_opencurl_)
            + ToString (_statements_)
            + ToString (_closecurl_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _whilelit_ == child )
        {
            _whilelit_ = null;
            return;
        }
        if ( _expressions_ == child )
        {
            _expressions_ = null;
            return;
        }
        if ( _opencurl_ == child )
        {
            _opencurl_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _closecurl_ == child )
        {
            _closecurl_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _whilelit_ == oldChild )
        {
            SetWhilelit ((TWhilelit) newChild);
            return;
        }
        if ( _expressions_ == oldChild )
        {
            SetExpressions ((PExpressions) newChild);
            return;
        }
        if ( _opencurl_ == oldChild )
        {
            SetOpencurl ((TOpencurl) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _closecurl_ == oldChild )
        {
            SetClosecurl ((TClosecurl) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AAndExpressions : PExpressions
{
    private PExpressions _expressions_;
    private TAnd _and_;
    private PLogicalCompare _logical_compare_;

    public AAndExpressions ()
    {
    }

    public AAndExpressions (
            PExpressions _expressions_,
            TAnd _and_,
            PLogicalCompare _logical_compare_
    )
    {
        SetExpressions (_expressions_);
        SetAnd (_and_);
        SetLogicalCompare (_logical_compare_);
    }

    public override Object Clone()
    {
        return new AAndExpressions (
            (PExpressions)CloneNode (_expressions_),
            (TAnd)CloneNode (_and_),
            (PLogicalCompare)CloneNode (_logical_compare_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndExpressions(this);
    }

    public PExpressions GetExpressions ()
    {
        return _expressions_;
    }

    public void SetExpressions (PExpressions node)
    {
        if(_expressions_ != null)
        {
            _expressions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expressions_ = node;
    }
    public TAnd GetAnd ()
    {
        return _and_;
    }

    public void SetAnd (TAnd node)
    {
        if(_and_ != null)
        {
            _and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_ = node;
    }
    public PLogicalCompare GetLogicalCompare ()
    {
        return _logical_compare_;
    }

    public void SetLogicalCompare (PLogicalCompare node)
    {
        if(_logical_compare_ != null)
        {
            _logical_compare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logical_compare_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expressions_)
            + ToString (_and_)
            + ToString (_logical_compare_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expressions_ == child )
        {
            _expressions_ = null;
            return;
        }
        if ( _and_ == child )
        {
            _and_ = null;
            return;
        }
        if ( _logical_compare_ == child )
        {
            _logical_compare_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expressions_ == oldChild )
        {
            SetExpressions ((PExpressions) newChild);
            return;
        }
        if ( _and_ == oldChild )
        {
            SetAnd ((TAnd) newChild);
            return;
        }
        if ( _logical_compare_ == oldChild )
        {
            SetLogicalCompare ((PLogicalCompare) newChild);
            return;
        }
    }

}
public sealed class AOrExpressions : PExpressions
{
    private PExpressions _expressions_;
    private TOr _or_;
    private PLogicalCompare _logical_compare_;

    public AOrExpressions ()
    {
    }

    public AOrExpressions (
            PExpressions _expressions_,
            TOr _or_,
            PLogicalCompare _logical_compare_
    )
    {
        SetExpressions (_expressions_);
        SetOr (_or_);
        SetLogicalCompare (_logical_compare_);
    }

    public override Object Clone()
    {
        return new AOrExpressions (
            (PExpressions)CloneNode (_expressions_),
            (TOr)CloneNode (_or_),
            (PLogicalCompare)CloneNode (_logical_compare_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOrExpressions(this);
    }

    public PExpressions GetExpressions ()
    {
        return _expressions_;
    }

    public void SetExpressions (PExpressions node)
    {
        if(_expressions_ != null)
        {
            _expressions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expressions_ = node;
    }
    public TOr GetOr ()
    {
        return _or_;
    }

    public void SetOr (TOr node)
    {
        if(_or_ != null)
        {
            _or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_ = node;
    }
    public PLogicalCompare GetLogicalCompare ()
    {
        return _logical_compare_;
    }

    public void SetLogicalCompare (PLogicalCompare node)
    {
        if(_logical_compare_ != null)
        {
            _logical_compare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logical_compare_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expressions_)
            + ToString (_or_)
            + ToString (_logical_compare_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expressions_ == child )
        {
            _expressions_ = null;
            return;
        }
        if ( _or_ == child )
        {
            _or_ = null;
            return;
        }
        if ( _logical_compare_ == child )
        {
            _logical_compare_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expressions_ == oldChild )
        {
            SetExpressions ((PExpressions) newChild);
            return;
        }
        if ( _or_ == oldChild )
        {
            SetOr ((TOr) newChild);
            return;
        }
        if ( _logical_compare_ == oldChild )
        {
            SetLogicalCompare ((PLogicalCompare) newChild);
            return;
        }
    }

}
public sealed class ANotExpressions : PExpressions
{
    private PExpressions _expressions_;
    private TNot _not_;
    private PLogicalCompare _logical_compare_;

    public ANotExpressions ()
    {
    }

    public ANotExpressions (
            PExpressions _expressions_,
            TNot _not_,
            PLogicalCompare _logical_compare_
    )
    {
        SetExpressions (_expressions_);
        SetNot (_not_);
        SetLogicalCompare (_logical_compare_);
    }

    public override Object Clone()
    {
        return new ANotExpressions (
            (PExpressions)CloneNode (_expressions_),
            (TNot)CloneNode (_not_),
            (PLogicalCompare)CloneNode (_logical_compare_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotExpressions(this);
    }

    public PExpressions GetExpressions ()
    {
        return _expressions_;
    }

    public void SetExpressions (PExpressions node)
    {
        if(_expressions_ != null)
        {
            _expressions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expressions_ = node;
    }
    public TNot GetNot ()
    {
        return _not_;
    }

    public void SetNot (TNot node)
    {
        if(_not_ != null)
        {
            _not_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _not_ = node;
    }
    public PLogicalCompare GetLogicalCompare ()
    {
        return _logical_compare_;
    }

    public void SetLogicalCompare (PLogicalCompare node)
    {
        if(_logical_compare_ != null)
        {
            _logical_compare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logical_compare_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expressions_)
            + ToString (_not_)
            + ToString (_logical_compare_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expressions_ == child )
        {
            _expressions_ = null;
            return;
        }
        if ( _not_ == child )
        {
            _not_ = null;
            return;
        }
        if ( _logical_compare_ == child )
        {
            _logical_compare_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expressions_ == oldChild )
        {
            SetExpressions ((PExpressions) newChild);
            return;
        }
        if ( _not_ == oldChild )
        {
            SetNot ((TNot) newChild);
            return;
        }
        if ( _logical_compare_ == oldChild )
        {
            SetLogicalCompare ((PLogicalCompare) newChild);
            return;
        }
    }

}
public sealed class ANoLogOpExpressions : PExpressions
{
    private PLogicalCompare _logical_compare_;

    public ANoLogOpExpressions ()
    {
    }

    public ANoLogOpExpressions (
            PLogicalCompare _logical_compare_
    )
    {
        SetLogicalCompare (_logical_compare_);
    }

    public override Object Clone()
    {
        return new ANoLogOpExpressions (
            (PLogicalCompare)CloneNode (_logical_compare_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoLogOpExpressions(this);
    }

    public PLogicalCompare GetLogicalCompare ()
    {
        return _logical_compare_;
    }

    public void SetLogicalCompare (PLogicalCompare node)
    {
        if(_logical_compare_ != null)
        {
            _logical_compare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logical_compare_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_logical_compare_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _logical_compare_ == child )
        {
            _logical_compare_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _logical_compare_ == oldChild )
        {
            SetLogicalCompare ((PLogicalCompare) newChild);
            return;
        }
    }

}
public sealed class AGreaterLogicalCompare : PLogicalCompare
{
    private PAddSub _side1_;
    private TGrtr _grtr_;
    private PAddSub _side2_;

    public AGreaterLogicalCompare ()
    {
    }

    public AGreaterLogicalCompare (
            PAddSub _side1_,
            TGrtr _grtr_,
            PAddSub _side2_
    )
    {
        SetSide1 (_side1_);
        SetGrtr (_grtr_);
        SetSide2 (_side2_);
    }

    public override Object Clone()
    {
        return new AGreaterLogicalCompare (
            (PAddSub)CloneNode (_side1_),
            (TGrtr)CloneNode (_grtr_),
            (PAddSub)CloneNode (_side2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterLogicalCompare(this);
    }

    public PAddSub GetSide1 ()
    {
        return _side1_;
    }

    public void SetSide1 (PAddSub node)
    {
        if(_side1_ != null)
        {
            _side1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _side1_ = node;
    }
    public TGrtr GetGrtr ()
    {
        return _grtr_;
    }

    public void SetGrtr (TGrtr node)
    {
        if(_grtr_ != null)
        {
            _grtr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _grtr_ = node;
    }
    public PAddSub GetSide2 ()
    {
        return _side2_;
    }

    public void SetSide2 (PAddSub node)
    {
        if(_side2_ != null)
        {
            _side2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _side2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_side1_)
            + ToString (_grtr_)
            + ToString (_side2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _side1_ == child )
        {
            _side1_ = null;
            return;
        }
        if ( _grtr_ == child )
        {
            _grtr_ = null;
            return;
        }
        if ( _side2_ == child )
        {
            _side2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _side1_ == oldChild )
        {
            SetSide1 ((PAddSub) newChild);
            return;
        }
        if ( _grtr_ == oldChild )
        {
            SetGrtr ((TGrtr) newChild);
            return;
        }
        if ( _side2_ == oldChild )
        {
            SetSide2 ((PAddSub) newChild);
            return;
        }
    }

}
public sealed class ALessThanLogicalCompare : PLogicalCompare
{
    private PAddSub _side1_;
    private TLessthan _lessthan_;
    private PAddSub _side2_;

    public ALessThanLogicalCompare ()
    {
    }

    public ALessThanLogicalCompare (
            PAddSub _side1_,
            TLessthan _lessthan_,
            PAddSub _side2_
    )
    {
        SetSide1 (_side1_);
        SetLessthan (_lessthan_);
        SetSide2 (_side2_);
    }

    public override Object Clone()
    {
        return new ALessThanLogicalCompare (
            (PAddSub)CloneNode (_side1_),
            (TLessthan)CloneNode (_lessthan_),
            (PAddSub)CloneNode (_side2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessThanLogicalCompare(this);
    }

    public PAddSub GetSide1 ()
    {
        return _side1_;
    }

    public void SetSide1 (PAddSub node)
    {
        if(_side1_ != null)
        {
            _side1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _side1_ = node;
    }
    public TLessthan GetLessthan ()
    {
        return _lessthan_;
    }

    public void SetLessthan (TLessthan node)
    {
        if(_lessthan_ != null)
        {
            _lessthan_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lessthan_ = node;
    }
    public PAddSub GetSide2 ()
    {
        return _side2_;
    }

    public void SetSide2 (PAddSub node)
    {
        if(_side2_ != null)
        {
            _side2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _side2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_side1_)
            + ToString (_lessthan_)
            + ToString (_side2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _side1_ == child )
        {
            _side1_ = null;
            return;
        }
        if ( _lessthan_ == child )
        {
            _lessthan_ = null;
            return;
        }
        if ( _side2_ == child )
        {
            _side2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _side1_ == oldChild )
        {
            SetSide1 ((PAddSub) newChild);
            return;
        }
        if ( _lessthan_ == oldChild )
        {
            SetLessthan ((TLessthan) newChild);
            return;
        }
        if ( _side2_ == oldChild )
        {
            SetSide2 ((PAddSub) newChild);
            return;
        }
    }

}
public sealed class AGreaterThanEqualToLogicalCompare : PLogicalCompare
{
    private PAddSub _side1_;
    private TGrtreqto _grtreqto_;
    private PAddSub _side2_;

    public AGreaterThanEqualToLogicalCompare ()
    {
    }

    public AGreaterThanEqualToLogicalCompare (
            PAddSub _side1_,
            TGrtreqto _grtreqto_,
            PAddSub _side2_
    )
    {
        SetSide1 (_side1_);
        SetGrtreqto (_grtreqto_);
        SetSide2 (_side2_);
    }

    public override Object Clone()
    {
        return new AGreaterThanEqualToLogicalCompare (
            (PAddSub)CloneNode (_side1_),
            (TGrtreqto)CloneNode (_grtreqto_),
            (PAddSub)CloneNode (_side2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterThanEqualToLogicalCompare(this);
    }

    public PAddSub GetSide1 ()
    {
        return _side1_;
    }

    public void SetSide1 (PAddSub node)
    {
        if(_side1_ != null)
        {
            _side1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _side1_ = node;
    }
    public TGrtreqto GetGrtreqto ()
    {
        return _grtreqto_;
    }

    public void SetGrtreqto (TGrtreqto node)
    {
        if(_grtreqto_ != null)
        {
            _grtreqto_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _grtreqto_ = node;
    }
    public PAddSub GetSide2 ()
    {
        return _side2_;
    }

    public void SetSide2 (PAddSub node)
    {
        if(_side2_ != null)
        {
            _side2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _side2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_side1_)
            + ToString (_grtreqto_)
            + ToString (_side2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _side1_ == child )
        {
            _side1_ = null;
            return;
        }
        if ( _grtreqto_ == child )
        {
            _grtreqto_ = null;
            return;
        }
        if ( _side2_ == child )
        {
            _side2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _side1_ == oldChild )
        {
            SetSide1 ((PAddSub) newChild);
            return;
        }
        if ( _grtreqto_ == oldChild )
        {
            SetGrtreqto ((TGrtreqto) newChild);
            return;
        }
        if ( _side2_ == oldChild )
        {
            SetSide2 ((PAddSub) newChild);
            return;
        }
    }

}
public sealed class ALessThanEqualToLogicalCompare : PLogicalCompare
{
    private PAddSub _side1_;
    private TLesseqto _lesseqto_;
    private PAddSub _side2_;

    public ALessThanEqualToLogicalCompare ()
    {
    }

    public ALessThanEqualToLogicalCompare (
            PAddSub _side1_,
            TLesseqto _lesseqto_,
            PAddSub _side2_
    )
    {
        SetSide1 (_side1_);
        SetLesseqto (_lesseqto_);
        SetSide2 (_side2_);
    }

    public override Object Clone()
    {
        return new ALessThanEqualToLogicalCompare (
            (PAddSub)CloneNode (_side1_),
            (TLesseqto)CloneNode (_lesseqto_),
            (PAddSub)CloneNode (_side2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessThanEqualToLogicalCompare(this);
    }

    public PAddSub GetSide1 ()
    {
        return _side1_;
    }

    public void SetSide1 (PAddSub node)
    {
        if(_side1_ != null)
        {
            _side1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _side1_ = node;
    }
    public TLesseqto GetLesseqto ()
    {
        return _lesseqto_;
    }

    public void SetLesseqto (TLesseqto node)
    {
        if(_lesseqto_ != null)
        {
            _lesseqto_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lesseqto_ = node;
    }
    public PAddSub GetSide2 ()
    {
        return _side2_;
    }

    public void SetSide2 (PAddSub node)
    {
        if(_side2_ != null)
        {
            _side2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _side2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_side1_)
            + ToString (_lesseqto_)
            + ToString (_side2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _side1_ == child )
        {
            _side1_ = null;
            return;
        }
        if ( _lesseqto_ == child )
        {
            _lesseqto_ = null;
            return;
        }
        if ( _side2_ == child )
        {
            _side2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _side1_ == oldChild )
        {
            SetSide1 ((PAddSub) newChild);
            return;
        }
        if ( _lesseqto_ == oldChild )
        {
            SetLesseqto ((TLesseqto) newChild);
            return;
        }
        if ( _side2_ == oldChild )
        {
            SetSide2 ((PAddSub) newChild);
            return;
        }
    }

}
public sealed class AEqualToLogicalCompare : PLogicalCompare
{
    private PAddSub _side1_;
    private TEqto _eqto_;
    private PAddSub _side2_;

    public AEqualToLogicalCompare ()
    {
    }

    public AEqualToLogicalCompare (
            PAddSub _side1_,
            TEqto _eqto_,
            PAddSub _side2_
    )
    {
        SetSide1 (_side1_);
        SetEqto (_eqto_);
        SetSide2 (_side2_);
    }

    public override Object Clone()
    {
        return new AEqualToLogicalCompare (
            (PAddSub)CloneNode (_side1_),
            (TEqto)CloneNode (_eqto_),
            (PAddSub)CloneNode (_side2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqualToLogicalCompare(this);
    }

    public PAddSub GetSide1 ()
    {
        return _side1_;
    }

    public void SetSide1 (PAddSub node)
    {
        if(_side1_ != null)
        {
            _side1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _side1_ = node;
    }
    public TEqto GetEqto ()
    {
        return _eqto_;
    }

    public void SetEqto (TEqto node)
    {
        if(_eqto_ != null)
        {
            _eqto_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eqto_ = node;
    }
    public PAddSub GetSide2 ()
    {
        return _side2_;
    }

    public void SetSide2 (PAddSub node)
    {
        if(_side2_ != null)
        {
            _side2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _side2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_side1_)
            + ToString (_eqto_)
            + ToString (_side2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _side1_ == child )
        {
            _side1_ = null;
            return;
        }
        if ( _eqto_ == child )
        {
            _eqto_ = null;
            return;
        }
        if ( _side2_ == child )
        {
            _side2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _side1_ == oldChild )
        {
            SetSide1 ((PAddSub) newChild);
            return;
        }
        if ( _eqto_ == oldChild )
        {
            SetEqto ((TEqto) newChild);
            return;
        }
        if ( _side2_ == oldChild )
        {
            SetSide2 ((PAddSub) newChild);
            return;
        }
    }

}
public sealed class ANoLogCompareLogicalCompare : PLogicalCompare
{
    private PAddSub _add_sub_;

    public ANoLogCompareLogicalCompare ()
    {
    }

    public ANoLogCompareLogicalCompare (
            PAddSub _add_sub_
    )
    {
        SetAddSub (_add_sub_);
    }

    public override Object Clone()
    {
        return new ANoLogCompareLogicalCompare (
            (PAddSub)CloneNode (_add_sub_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoLogCompareLogicalCompare(this);
    }

    public PAddSub GetAddSub ()
    {
        return _add_sub_;
    }

    public void SetAddSub (PAddSub node)
    {
        if(_add_sub_ != null)
        {
            _add_sub_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _add_sub_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_add_sub_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _add_sub_ == child )
        {
            _add_sub_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _add_sub_ == oldChild )
        {
            SetAddSub ((PAddSub) newChild);
            return;
        }
    }

}
public sealed class AAddAddSub : PAddSub
{
    private PAddSub _add_sub_;
    private TPlus _plus_;
    private PMultiDiv _multi_div_;

    public AAddAddSub ()
    {
    }

    public AAddAddSub (
            PAddSub _add_sub_,
            TPlus _plus_,
            PMultiDiv _multi_div_
    )
    {
        SetAddSub (_add_sub_);
        SetPlus (_plus_);
        SetMultiDiv (_multi_div_);
    }

    public override Object Clone()
    {
        return new AAddAddSub (
            (PAddSub)CloneNode (_add_sub_),
            (TPlus)CloneNode (_plus_),
            (PMultiDiv)CloneNode (_multi_div_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAddAddSub(this);
    }

    public PAddSub GetAddSub ()
    {
        return _add_sub_;
    }

    public void SetAddSub (PAddSub node)
    {
        if(_add_sub_ != null)
        {
            _add_sub_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _add_sub_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PMultiDiv GetMultiDiv ()
    {
        return _multi_div_;
    }

    public void SetMultiDiv (PMultiDiv node)
    {
        if(_multi_div_ != null)
        {
            _multi_div_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multi_div_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_add_sub_)
            + ToString (_plus_)
            + ToString (_multi_div_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _add_sub_ == child )
        {
            _add_sub_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _multi_div_ == child )
        {
            _multi_div_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _add_sub_ == oldChild )
        {
            SetAddSub ((PAddSub) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _multi_div_ == oldChild )
        {
            SetMultiDiv ((PMultiDiv) newChild);
            return;
        }
    }

}
public sealed class ASubtractAddSub : PAddSub
{
    private PAddSub _add_sub_;
    private TSub _sub_;
    private PMultiDiv _multi_div_;

    public ASubtractAddSub ()
    {
    }

    public ASubtractAddSub (
            PAddSub _add_sub_,
            TSub _sub_,
            PMultiDiv _multi_div_
    )
    {
        SetAddSub (_add_sub_);
        SetSub (_sub_);
        SetMultiDiv (_multi_div_);
    }

    public override Object Clone()
    {
        return new ASubtractAddSub (
            (PAddSub)CloneNode (_add_sub_),
            (TSub)CloneNode (_sub_),
            (PMultiDiv)CloneNode (_multi_div_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASubtractAddSub(this);
    }

    public PAddSub GetAddSub ()
    {
        return _add_sub_;
    }

    public void SetAddSub (PAddSub node)
    {
        if(_add_sub_ != null)
        {
            _add_sub_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _add_sub_ = node;
    }
    public TSub GetSub ()
    {
        return _sub_;
    }

    public void SetSub (TSub node)
    {
        if(_sub_ != null)
        {
            _sub_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _sub_ = node;
    }
    public PMultiDiv GetMultiDiv ()
    {
        return _multi_div_;
    }

    public void SetMultiDiv (PMultiDiv node)
    {
        if(_multi_div_ != null)
        {
            _multi_div_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multi_div_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_add_sub_)
            + ToString (_sub_)
            + ToString (_multi_div_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _add_sub_ == child )
        {
            _add_sub_ = null;
            return;
        }
        if ( _sub_ == child )
        {
            _sub_ = null;
            return;
        }
        if ( _multi_div_ == child )
        {
            _multi_div_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _add_sub_ == oldChild )
        {
            SetAddSub ((PAddSub) newChild);
            return;
        }
        if ( _sub_ == oldChild )
        {
            SetSub ((TSub) newChild);
            return;
        }
        if ( _multi_div_ == oldChild )
        {
            SetMultiDiv ((PMultiDiv) newChild);
            return;
        }
    }

}
public sealed class ANoMoreAddSubAddSub : PAddSub
{
    private PMultiDiv _multi_div_;

    public ANoMoreAddSubAddSub ()
    {
    }

    public ANoMoreAddSubAddSub (
            PMultiDiv _multi_div_
    )
    {
        SetMultiDiv (_multi_div_);
    }

    public override Object Clone()
    {
        return new ANoMoreAddSubAddSub (
            (PMultiDiv)CloneNode (_multi_div_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoMoreAddSubAddSub(this);
    }

    public PMultiDiv GetMultiDiv ()
    {
        return _multi_div_;
    }

    public void SetMultiDiv (PMultiDiv node)
    {
        if(_multi_div_ != null)
        {
            _multi_div_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multi_div_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_multi_div_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _multi_div_ == child )
        {
            _multi_div_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _multi_div_ == oldChild )
        {
            SetMultiDiv ((PMultiDiv) newChild);
            return;
        }
    }

}
public sealed class AMultiplyMultiDiv : PMultiDiv
{
    private PMultiDiv _multi_div_;
    private TMulti _multi_;
    private PParenth _parenth_;

    public AMultiplyMultiDiv ()
    {
    }

    public AMultiplyMultiDiv (
            PMultiDiv _multi_div_,
            TMulti _multi_,
            PParenth _parenth_
    )
    {
        SetMultiDiv (_multi_div_);
        SetMulti (_multi_);
        SetParenth (_parenth_);
    }

    public override Object Clone()
    {
        return new AMultiplyMultiDiv (
            (PMultiDiv)CloneNode (_multi_div_),
            (TMulti)CloneNode (_multi_),
            (PParenth)CloneNode (_parenth_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultiplyMultiDiv(this);
    }

    public PMultiDiv GetMultiDiv ()
    {
        return _multi_div_;
    }

    public void SetMultiDiv (PMultiDiv node)
    {
        if(_multi_div_ != null)
        {
            _multi_div_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multi_div_ = node;
    }
    public TMulti GetMulti ()
    {
        return _multi_;
    }

    public void SetMulti (TMulti node)
    {
        if(_multi_ != null)
        {
            _multi_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multi_ = node;
    }
    public PParenth GetParenth ()
    {
        return _parenth_;
    }

    public void SetParenth (PParenth node)
    {
        if(_parenth_ != null)
        {
            _parenth_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parenth_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_multi_div_)
            + ToString (_multi_)
            + ToString (_parenth_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _multi_div_ == child )
        {
            _multi_div_ = null;
            return;
        }
        if ( _multi_ == child )
        {
            _multi_ = null;
            return;
        }
        if ( _parenth_ == child )
        {
            _parenth_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _multi_div_ == oldChild )
        {
            SetMultiDiv ((PMultiDiv) newChild);
            return;
        }
        if ( _multi_ == oldChild )
        {
            SetMulti ((TMulti) newChild);
            return;
        }
        if ( _parenth_ == oldChild )
        {
            SetParenth ((PParenth) newChild);
            return;
        }
    }

}
public sealed class ADivideMultiDiv : PMultiDiv
{
    private PMultiDiv _multi_div_;
    private TDiv _div_;
    private PParenth _parenth_;

    public ADivideMultiDiv ()
    {
    }

    public ADivideMultiDiv (
            PMultiDiv _multi_div_,
            TDiv _div_,
            PParenth _parenth_
    )
    {
        SetMultiDiv (_multi_div_);
        SetDiv (_div_);
        SetParenth (_parenth_);
    }

    public override Object Clone()
    {
        return new ADivideMultiDiv (
            (PMultiDiv)CloneNode (_multi_div_),
            (TDiv)CloneNode (_div_),
            (PParenth)CloneNode (_parenth_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivideMultiDiv(this);
    }

    public PMultiDiv GetMultiDiv ()
    {
        return _multi_div_;
    }

    public void SetMultiDiv (PMultiDiv node)
    {
        if(_multi_div_ != null)
        {
            _multi_div_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multi_div_ = node;
    }
    public TDiv GetDiv ()
    {
        return _div_;
    }

    public void SetDiv (TDiv node)
    {
        if(_div_ != null)
        {
            _div_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _div_ = node;
    }
    public PParenth GetParenth ()
    {
        return _parenth_;
    }

    public void SetParenth (PParenth node)
    {
        if(_parenth_ != null)
        {
            _parenth_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parenth_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_multi_div_)
            + ToString (_div_)
            + ToString (_parenth_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _multi_div_ == child )
        {
            _multi_div_ = null;
            return;
        }
        if ( _div_ == child )
        {
            _div_ = null;
            return;
        }
        if ( _parenth_ == child )
        {
            _parenth_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _multi_div_ == oldChild )
        {
            SetMultiDiv ((PMultiDiv) newChild);
            return;
        }
        if ( _div_ == oldChild )
        {
            SetDiv ((TDiv) newChild);
            return;
        }
        if ( _parenth_ == oldChild )
        {
            SetParenth ((PParenth) newChild);
            return;
        }
    }

}
public sealed class ANoMoreDivMultiMultiDiv : PMultiDiv
{
    private PParenth _parenth_;

    public ANoMoreDivMultiMultiDiv ()
    {
    }

    public ANoMoreDivMultiMultiDiv (
            PParenth _parenth_
    )
    {
        SetParenth (_parenth_);
    }

    public override Object Clone()
    {
        return new ANoMoreDivMultiMultiDiv (
            (PParenth)CloneNode (_parenth_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoMoreDivMultiMultiDiv(this);
    }

    public PParenth GetParenth ()
    {
        return _parenth_;
    }

    public void SetParenth (PParenth node)
    {
        if(_parenth_ != null)
        {
            _parenth_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parenth_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parenth_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parenth_ == child )
        {
            _parenth_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _parenth_ == oldChild )
        {
            SetParenth ((PParenth) newChild);
            return;
        }
    }

}
public sealed class AParenthParenth : PParenth
{
    private TOpenparenth _openparenth_;
    private PExpressions _expressions_;
    private TClosedparenth _closedparenth_;

    public AParenthParenth ()
    {
    }

    public AParenthParenth (
            TOpenparenth _openparenth_,
            PExpressions _expressions_,
            TClosedparenth _closedparenth_
    )
    {
        SetOpenparenth (_openparenth_);
        SetExpressions (_expressions_);
        SetClosedparenth (_closedparenth_);
    }

    public override Object Clone()
    {
        return new AParenthParenth (
            (TOpenparenth)CloneNode (_openparenth_),
            (PExpressions)CloneNode (_expressions_),
            (TClosedparenth)CloneNode (_closedparenth_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParenthParenth(this);
    }

    public TOpenparenth GetOpenparenth ()
    {
        return _openparenth_;
    }

    public void SetOpenparenth (TOpenparenth node)
    {
        if(_openparenth_ != null)
        {
            _openparenth_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openparenth_ = node;
    }
    public PExpressions GetExpressions ()
    {
        return _expressions_;
    }

    public void SetExpressions (PExpressions node)
    {
        if(_expressions_ != null)
        {
            _expressions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expressions_ = node;
    }
    public TClosedparenth GetClosedparenth ()
    {
        return _closedparenth_;
    }

    public void SetClosedparenth (TClosedparenth node)
    {
        if(_closedparenth_ != null)
        {
            _closedparenth_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closedparenth_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_openparenth_)
            + ToString (_expressions_)
            + ToString (_closedparenth_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _openparenth_ == child )
        {
            _openparenth_ = null;
            return;
        }
        if ( _expressions_ == child )
        {
            _expressions_ = null;
            return;
        }
        if ( _closedparenth_ == child )
        {
            _closedparenth_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _openparenth_ == oldChild )
        {
            SetOpenparenth ((TOpenparenth) newChild);
            return;
        }
        if ( _expressions_ == oldChild )
        {
            SetExpressions ((PExpressions) newChild);
            return;
        }
        if ( _closedparenth_ == oldChild )
        {
            SetClosedparenth ((TClosedparenth) newChild);
            return;
        }
    }

}
public sealed class AIntParenth : PParenth
{
    private TIntlit _intlit_;

    public AIntParenth ()
    {
    }

    public AIntParenth (
            TIntlit _intlit_
    )
    {
        SetIntlit (_intlit_);
    }

    public override Object Clone()
    {
        return new AIntParenth (
            (TIntlit)CloneNode (_intlit_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntParenth(this);
    }

    public TIntlit GetIntlit ()
    {
        return _intlit_;
    }

    public void SetIntlit (TIntlit node)
    {
        if(_intlit_ != null)
        {
            _intlit_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _intlit_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_intlit_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _intlit_ == child )
        {
            _intlit_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _intlit_ == oldChild )
        {
            SetIntlit ((TIntlit) newChild);
            return;
        }
    }

}
public sealed class AFloatParenth : PParenth
{
    private TFloatlit _floatlit_;

    public AFloatParenth ()
    {
    }

    public AFloatParenth (
            TFloatlit _floatlit_
    )
    {
        SetFloatlit (_floatlit_);
    }

    public override Object Clone()
    {
        return new AFloatParenth (
            (TFloatlit)CloneNode (_floatlit_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatParenth(this);
    }

    public TFloatlit GetFloatlit ()
    {
        return _floatlit_;
    }

    public void SetFloatlit (TFloatlit node)
    {
        if(_floatlit_ != null)
        {
            _floatlit_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _floatlit_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_floatlit_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _floatlit_ == child )
        {
            _floatlit_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _floatlit_ == oldChild )
        {
            SetFloatlit ((TFloatlit) newChild);
            return;
        }
    }

}
public sealed class AArrayParenth : PParenth
{
    private TId _id_;
    private TOpenbracket _openbracket_;
    private PExpressions _expressions_;
    private TClosedbracket _closedbracket_;

    public AArrayParenth ()
    {
    }

    public AArrayParenth (
            TId _id_,
            TOpenbracket _openbracket_,
            PExpressions _expressions_,
            TClosedbracket _closedbracket_
    )
    {
        SetId (_id_);
        SetOpenbracket (_openbracket_);
        SetExpressions (_expressions_);
        SetClosedbracket (_closedbracket_);
    }

    public override Object Clone()
    {
        return new AArrayParenth (
            (TId)CloneNode (_id_),
            (TOpenbracket)CloneNode (_openbracket_),
            (PExpressions)CloneNode (_expressions_),
            (TClosedbracket)CloneNode (_closedbracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayParenth(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenbracket GetOpenbracket ()
    {
        return _openbracket_;
    }

    public void SetOpenbracket (TOpenbracket node)
    {
        if(_openbracket_ != null)
        {
            _openbracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbracket_ = node;
    }
    public PExpressions GetExpressions ()
    {
        return _expressions_;
    }

    public void SetExpressions (PExpressions node)
    {
        if(_expressions_ != null)
        {
            _expressions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expressions_ = node;
    }
    public TClosedbracket GetClosedbracket ()
    {
        return _closedbracket_;
    }

    public void SetClosedbracket (TClosedbracket node)
    {
        if(_closedbracket_ != null)
        {
            _closedbracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closedbracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_openbracket_)
            + ToString (_expressions_)
            + ToString (_closedbracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _openbracket_ == child )
        {
            _openbracket_ = null;
            return;
        }
        if ( _expressions_ == child )
        {
            _expressions_ = null;
            return;
        }
        if ( _closedbracket_ == child )
        {
            _closedbracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _openbracket_ == oldChild )
        {
            SetOpenbracket ((TOpenbracket) newChild);
            return;
        }
        if ( _expressions_ == oldChild )
        {
            SetExpressions ((PExpressions) newChild);
            return;
        }
        if ( _closedbracket_ == oldChild )
        {
            SetClosedbracket ((TClosedbracket) newChild);
            return;
        }
    }

}
public sealed class AVariableParenth : PParenth
{
    private TId _id_;

    public AVariableParenth ()
    {
    }

    public AVariableParenth (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AVariableParenth (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableParenth(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
